'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DailyGLSubReport2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DailyGLSubReport2
    Inherits Global.System.Data.DataSet
    
    Private tableDatasetDailyGLSubReport As DatasetDailyGLSubReportDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DatasetDailyGLSubReport")) Is Nothing) Then
                MyBase.Tables.Add(New DatasetDailyGLSubReportDataTable(ds.Tables("DatasetDailyGLSubReport")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DatasetDailyGLSubReport() As DatasetDailyGLSubReportDataTable
        Get
            Return Me.tableDatasetDailyGLSubReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DailyGLSubReport2 = CType(MyBase.Clone,DailyGLSubReport2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DatasetDailyGLSubReport")) Is Nothing) Then
                MyBase.Tables.Add(New DatasetDailyGLSubReportDataTable(ds.Tables("DatasetDailyGLSubReport")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDatasetDailyGLSubReport = CType(MyBase.Tables("DatasetDailyGLSubReport"),DatasetDailyGLSubReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatasetDailyGLSubReport) Is Nothing) Then
                Me.tableDatasetDailyGLSubReport.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DailyGLSubReport2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DailyGLSubReport2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDatasetDailyGLSubReport = New DatasetDailyGLSubReportDataTable
        MyBase.Tables.Add(Me.tableDatasetDailyGLSubReport)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatasetDailyGLSubReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DailyGLSubReport2 = New DailyGLSubReport2
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DatasetDailyGLSubReportRowChangeEventHandler(ByVal sender As Object, ByVal e As DatasetDailyGLSubReportRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatasetDailyGLSubReportDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGL_DEPT_CODE As Global.System.Data.DataColumn
        
        Private columnGL_AMT_DEBIT As Global.System.Data.DataColumn
        
        Private columnGL_AMT_CREDIT As Global.System.Data.DataColumn
        
        Private columnGL_CURRENCY_TYPE As Global.System.Data.DataColumn
        
        Private columnGL_FC_TYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatasetDailyGLSubReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GL_DEPT_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGL_DEPT_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GL_AMT_DEBITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGL_AMT_DEBIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GL_AMT_CREDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGL_AMT_CREDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GL_CURRENCY_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGL_CURRENCY_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GL_FC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGL_FC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatasetDailyGLSubReportRow
            Get
                Return CType(Me.Rows(index),DatasetDailyGLSubReportRow)
            End Get
        End Property
        
        Public Event DatasetDailyGLSubReportRowChanging As DatasetDailyGLSubReportRowChangeEventHandler
        
        Public Event DatasetDailyGLSubReportRowChanged As DatasetDailyGLSubReportRowChangeEventHandler
        
        Public Event DatasetDailyGLSubReportRowDeleting As DatasetDailyGLSubReportRowChangeEventHandler
        
        Public Event DatasetDailyGLSubReportRowDeleted As DatasetDailyGLSubReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatasetDailyGLSubReportRow(ByVal row As DatasetDailyGLSubReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatasetDailyGLSubReportRow(ByVal GL_DEPT_CODE As String, ByVal GL_AMT_DEBIT As Decimal, ByVal GL_AMT_CREDIT As Decimal, ByVal GL_CURRENCY_TYPE As String, ByVal GL_FC_TYPE As String) As DatasetDailyGLSubReportRow
            Dim rowDatasetDailyGLSubReportRow As DatasetDailyGLSubReportRow = CType(Me.NewRow,DatasetDailyGLSubReportRow)
            Dim columnValuesArray() As Object = New Object() {GL_DEPT_CODE, GL_AMT_DEBIT, GL_AMT_CREDIT, GL_CURRENCY_TYPE, GL_FC_TYPE}
            rowDatasetDailyGLSubReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatasetDailyGLSubReportRow)
            Return rowDatasetDailyGLSubReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatasetDailyGLSubReportDataTable = CType(MyBase.Clone,DatasetDailyGLSubReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatasetDailyGLSubReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGL_DEPT_CODE = MyBase.Columns("GL_DEPT_CODE")
            Me.columnGL_AMT_DEBIT = MyBase.Columns("GL_AMT_DEBIT")
            Me.columnGL_AMT_CREDIT = MyBase.Columns("GL_AMT_CREDIT")
            Me.columnGL_CURRENCY_TYPE = MyBase.Columns("GL_CURRENCY_TYPE")
            Me.columnGL_FC_TYPE = MyBase.Columns("GL_FC_TYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGL_DEPT_CODE = New Global.System.Data.DataColumn("GL_DEPT_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGL_DEPT_CODE)
            Me.columnGL_AMT_DEBIT = New Global.System.Data.DataColumn("GL_AMT_DEBIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGL_AMT_DEBIT)
            Me.columnGL_AMT_CREDIT = New Global.System.Data.DataColumn("GL_AMT_CREDIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGL_AMT_CREDIT)
            Me.columnGL_CURRENCY_TYPE = New Global.System.Data.DataColumn("GL_CURRENCY_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGL_CURRENCY_TYPE)
            Me.columnGL_FC_TYPE = New Global.System.Data.DataColumn("GL_FC_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGL_FC_TYPE)
            Me.columnGL_DEPT_CODE.MaxLength = 10
            Me.columnGL_CURRENCY_TYPE.MaxLength = 3
            Me.columnGL_FC_TYPE.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatasetDailyGLSubReportRow() As DatasetDailyGLSubReportRow
            Return CType(Me.NewRow,DatasetDailyGLSubReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatasetDailyGLSubReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatasetDailyGLSubReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatasetDailyGLSubReportRowChangedEvent) Is Nothing) Then
                RaiseEvent DatasetDailyGLSubReportRowChanged(Me, New DatasetDailyGLSubReportRowChangeEvent(CType(e.Row,DatasetDailyGLSubReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatasetDailyGLSubReportRowChangingEvent) Is Nothing) Then
                RaiseEvent DatasetDailyGLSubReportRowChanging(Me, New DatasetDailyGLSubReportRowChangeEvent(CType(e.Row,DatasetDailyGLSubReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatasetDailyGLSubReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatasetDailyGLSubReportRowDeleted(Me, New DatasetDailyGLSubReportRowChangeEvent(CType(e.Row,DatasetDailyGLSubReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatasetDailyGLSubReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatasetDailyGLSubReportRowDeleting(Me, New DatasetDailyGLSubReportRowChangeEvent(CType(e.Row,DatasetDailyGLSubReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatasetDailyGLSubReportRow(ByVal row As DatasetDailyGLSubReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DailyGLSubReport2 = New DailyGLSubReport2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatasetDailyGLSubReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatasetDailyGLSubReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatasetDailyGLSubReport As DatasetDailyGLSubReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatasetDailyGLSubReport = CType(Me.Table,DatasetDailyGLSubReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GL_DEPT_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasetDailyGLSubReport.GL_DEPT_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GL_DEPT_CODE' in table 'DatasetDailyGLSubReport' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasetDailyGLSubReport.GL_DEPT_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GL_AMT_DEBIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatasetDailyGLSubReport.GL_AMT_DEBITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GL_AMT_DEBIT' in table 'DatasetDailyGLSubReport' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasetDailyGLSubReport.GL_AMT_DEBITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GL_AMT_CREDIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDatasetDailyGLSubReport.GL_AMT_CREDITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GL_AMT_CREDIT' in table 'DatasetDailyGLSubReport' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasetDailyGLSubReport.GL_AMT_CREDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GL_CURRENCY_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasetDailyGLSubReport.GL_CURRENCY_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GL_CURRENCY_TYPE' in table 'DatasetDailyGLSubReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasetDailyGLSubReport.GL_CURRENCY_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GL_FC_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasetDailyGLSubReport.GL_FC_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GL_FC_TYPE' in table 'DatasetDailyGLSubReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasetDailyGLSubReport.GL_FC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGL_DEPT_CODENull() As Boolean
            Return Me.IsNull(Me.tableDatasetDailyGLSubReport.GL_DEPT_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGL_DEPT_CODENull()
            Me(Me.tableDatasetDailyGLSubReport.GL_DEPT_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGL_AMT_DEBITNull() As Boolean
            Return Me.IsNull(Me.tableDatasetDailyGLSubReport.GL_AMT_DEBITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGL_AMT_DEBITNull()
            Me(Me.tableDatasetDailyGLSubReport.GL_AMT_DEBITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGL_AMT_CREDITNull() As Boolean
            Return Me.IsNull(Me.tableDatasetDailyGLSubReport.GL_AMT_CREDITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGL_AMT_CREDITNull()
            Me(Me.tableDatasetDailyGLSubReport.GL_AMT_CREDITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGL_CURRENCY_TYPENull() As Boolean
            Return Me.IsNull(Me.tableDatasetDailyGLSubReport.GL_CURRENCY_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGL_CURRENCY_TYPENull()
            Me(Me.tableDatasetDailyGLSubReport.GL_CURRENCY_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGL_FC_TYPENull() As Boolean
            Return Me.IsNull(Me.tableDatasetDailyGLSubReport.GL_FC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGL_FC_TYPENull()
            Me(Me.tableDatasetDailyGLSubReport.GL_FC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatasetDailyGLSubReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatasetDailyGLSubReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatasetDailyGLSubReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatasetDailyGLSubReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DailyGLSubReport2TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DatasetDailyGLSubReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DatasetDailyGLSubReport"
            tableMapping.ColumnMappings.Add("GL_DEPT_CODE", "GL_DEPT_CODE")
            tableMapping.ColumnMappings.Add("GL_AMT_DEBIT", "GL_AMT_DEBIT")
            tableMapping.ColumnMappings.Add("GL_AMT_CREDIT", "GL_AMT_CREDIT")
            tableMapping.ColumnMappings.Add("GL_CURRENCY_TYPE", "GL_CURRENCY_TYPE")
            tableMapping.ColumnMappings.Add("GL_FC_TYPE", "GL_FC_TYPE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `eprocure`.`gl_entry_daily` (`GL_DEPT_CODE`, `GL_AMT`, `GL_AMT`, `GL_"& _ 
                "CURRENCY_TYPE`, `GL_FC_TYPE`) VALUES (@GL_DEPT_CODE, @GL_AMT_DEBIT, @GL_AMT_CRED"& _ 
                "IT, @GL_CURRENCY_TYPE, @GL_FC_TYPE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GL_DEPT_CODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GL_DEPT_CODE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GL_AMT_DEBIT"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "GL_AMT_DEBIT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GL_AMT_CREDIT"
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.NewDecimal
            param.IsNullable = true
            param.SourceColumn = "GL_AMT_CREDIT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GL_CURRENCY_TYPE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GL_CURRENCY_TYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@GL_FC_TYPE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GL_FC_TYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString1").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GL_DEPT_CODE,GL_AMT AS GL_AMT_DEBIT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GL_AMT AS GL_AMT_CREDIT,            "& _ 
                "                                    "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GL_CURRENCY_TYPE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GL_FC_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM GL_Ent"& _ 
                "ry_daily "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY GL_CURRENCY_TYPE,gl_dorc,gl_dept_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER  BY GL_DEPT_COD"& _ 
                "E, GL_CC_CODE, GL_GL_CODE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DailyGLSubReport2.DatasetDailyGLSubReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DailyGLSubReport2.DatasetDailyGLSubReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DailyGLSubReport2.DatasetDailyGLSubReportDataTable = New DailyGLSubReport2.DatasetDailyGLSubReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DailyGLSubReport2.DatasetDailyGLSubReportDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DailyGLSubReport2) As Integer
            Return Me.Adapter.Update(dataSet, "DatasetDailyGLSubReport")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal GL_DEPT_CODE As String, ByVal GL_AMT_DEBIT As String, ByVal GL_AMT_CREDIT As String, ByVal GL_CURRENCY_TYPE As String, ByVal GL_FC_TYPE As String) As Integer
            If (GL_DEPT_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(GL_DEPT_CODE,String)
            End If
            If (GL_AMT_DEBIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GL_AMT_DEBIT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GL_AMT_DEBIT,String)
            End If
            If (GL_AMT_CREDIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GL_AMT_CREDIT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(GL_AMT_CREDIT,String)
            End If
            If (GL_CURRENCY_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(GL_CURRENCY_TYPE,String)
            End If
            If (GL_FC_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(GL_FC_TYPE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
