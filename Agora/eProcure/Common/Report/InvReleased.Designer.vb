'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("InvReleased"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InvReleased
    Inherits Global.System.Data.DataSet
    
    Private tabledtInvReleased As dtInvReleasedDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtInvReleased")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvReleasedDataTable(ds.Tables("dtInvReleased")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtInvReleased() As dtInvReleasedDataTable
        Get
            Return Me.tabledtInvReleased
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As InvReleased = CType(MyBase.Clone,InvReleased)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtInvReleased")) Is Nothing) Then
                MyBase.Tables.Add(New dtInvReleasedDataTable(ds.Tables("dtInvReleased")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtInvReleased = CType(MyBase.Tables("dtInvReleased"),dtInvReleasedDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtInvReleased) Is Nothing) Then
                Me.tabledtInvReleased.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "InvReleased"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InvReleased.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtInvReleased = New dtInvReleasedDataTable
        MyBase.Tables.Add(Me.tabledtInvReleased)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtInvReleased() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As InvReleased = New InvReleased
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtInvReleasedRowChangeEventHandler(ByVal sender As Object, ByVal e As dtInvReleasedRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtInvReleasedDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIM_INVOICE_NO As Global.System.Data.DataColumn
        
        Private columnIM_S_COY_ID As Global.System.Data.DataColumn
        
        Private columnIM_S_COY_NAME As Global.System.Data.DataColumn
        
        Private columnic_bank_code As Global.System.Data.DataColumn
        
        Private columnbc_bank_name As Global.System.Data.DataColumn
        
        Private columnIM_DOC_DATE As Global.System.Data.DataColumn
        
        Private columnIM_DUE_DATE As Global.System.Data.DataColumn
        
        Private columnIM_PRCS_SENT As Global.System.Data.DataColumn
        
        Private columnIM_PRCS_RECV As Global.System.Data.DataColumn
        
        Private columnIM_CREATED_BY As Global.System.Data.DataColumn
        
        Private columnIM_CURRENCY_CODE As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_TOTAL As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_STATUS As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_TYPE As Global.System.Data.DataColumn
        
        Private columnIM_STATUS_CHANGED_BY As Global.System.Data.DataColumn
        
        Private columnUM_USER_ID As Global.System.Data.DataColumn
        
        Private columnUM_USER_NAME As Global.System.Data.DataColumn
        
        Private columnIM_B_COY_ID As Global.System.Data.DataColumn
        
        Private columnIM_PAYMENT_NO As Global.System.Data.DataColumn
        
        Private columnFOId As Global.System.Data.DataColumn
        
        Private columnIM_PAYMENT_TERM As Global.System.Data.DataColumn
        
        Private columnIM_EXCHANGE_RATE As Global.System.Data.DataColumn
        
        Private columnForeignCurrency As Global.System.Data.DataColumn
        
        Private columnForeignAmount As Global.System.Data.DataColumn
        
        Private columnLocalCurrency As Global.System.Data.DataColumn
        
        Private columnLocalAmount As Global.System.Data.DataColumn
        
        Private columnim_invoice_no_cn_total As Global.System.Data.DataColumn
        
        Private columnim_cn_total As Global.System.Data.DataColumn
        
        Private columnic_bank_acct As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_convert As Global.System.Data.DataColumn
        
        Private columnim_withholding_opt As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_ibg As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_casa As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_cn_ibg As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_cn_casa As Global.System.Data.DataColumn
        
        Private columnim_withholding_tax_amt As Global.System.Data.DataColumn
        
        Private columnim_withholding_tax As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_RENTAS As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_BC As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_cn_RENTAS As Global.System.Data.DataColumn
        
        Private columnim_invoice_total_cn_BC As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_TOTAL_NO_TT As Global.System.Data.DataColumn
        
        Private columntotalinvamount As Global.System.Data.DataColumn
        
        Private columngstamount As Global.System.Data.DataColumn
        
        Private columnim_invoice_no_cn_total_no_gst As Global.System.Data.DataColumn
        
        Private columnim_cn_total_no_gst As Global.System.Data.DataColumn
        
        Private columngstamount_cn As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtInvReleased"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_S_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_S_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_S_COY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_S_COY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_bank_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_bank_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bc_bank_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbc_bank_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_DOC_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_DOC_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_DUE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_DUE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_PRCS_SENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_PRCS_SENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_PRCS_RECVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_PRCS_RECV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_CREATED_BYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_CREATED_BY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_CURRENCY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_CURRENCY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_STATUS_CHANGED_BYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_STATUS_CHANGED_BY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UM_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUM_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UM_USER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUM_USER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_B_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_B_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_PAYMENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_PAYMENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_PAYMENT_TERMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_PAYMENT_TERM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_EXCHANGE_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_EXCHANGE_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ForeignCurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeignCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ForeignAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeignAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalCurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_no_cn_totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_no_cn_total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_cn_totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_cn_total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_bank_acctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_bank_acct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_convertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_convert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_withholding_optColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_withholding_opt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_ibgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_ibg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_casaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_casa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_cn_ibgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_cn_ibg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_cn_casaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_cn_casa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_withholding_tax_amtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_withholding_tax_amt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_withholding_taxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_withholding_tax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_RENTASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_RENTAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_BCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_BC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_cn_RENTASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_cn_RENTAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_total_cn_BCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_total_cn_BC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_TOTAL_NO_TTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_TOTAL_NO_TT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalinvamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotalinvamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gstamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngstamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_invoice_no_cn_total_no_gstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_invoice_no_cn_total_no_gst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property im_cn_total_no_gstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnim_cn_total_no_gst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gstamount_cnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngstamount_cn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtInvReleasedRow
            Get
                Return CType(Me.Rows(index),dtInvReleasedRow)
            End Get
        End Property
        
        Public Event dtInvReleasedRowChanging As dtInvReleasedRowChangeEventHandler
        
        Public Event dtInvReleasedRowChanged As dtInvReleasedRowChangeEventHandler
        
        Public Event dtInvReleasedRowDeleting As dtInvReleasedRowChangeEventHandler
        
        Public Event dtInvReleasedRowDeleted As dtInvReleasedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtInvReleasedRow(ByVal row As dtInvReleasedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtInvReleasedRow( _
                    ByVal IM_INVOICE_NO As String,  _
                    ByVal IM_S_COY_ID As String,  _
                    ByVal IM_S_COY_NAME As String,  _
                    ByVal ic_bank_code As String,  _
                    ByVal bc_bank_name As String,  _
                    ByVal IM_DOC_DATE As Date,  _
                    ByVal IM_DUE_DATE As Date,  _
                    ByVal IM_PRCS_SENT As Date,  _
                    ByVal IM_PRCS_RECV As Date,  _
                    ByVal IM_CREATED_BY As String,  _
                    ByVal IM_CURRENCY_CODE As String,  _
                    ByVal IM_INVOICE_TOTAL As Decimal,  _
                    ByVal IM_INVOICE_STATUS As Integer,  _
                    ByVal IM_INVOICE_TYPE As String,  _
                    ByVal IM_STATUS_CHANGED_BY As String,  _
                    ByVal UM_USER_ID As String,  _
                    ByVal UM_USER_NAME As String,  _
                    ByVal IM_B_COY_ID As String,  _
                    ByVal IM_PAYMENT_NO As String,  _
                    ByVal FOId As String,  _
                    ByVal IM_PAYMENT_TERM As String,  _
                    ByVal IM_EXCHANGE_RATE As Double,  _
                    ByVal ForeignCurrency As String,  _
                    ByVal ForeignAmount As String,  _
                    ByVal LocalCurrency As String,  _
                    ByVal LocalAmount As Decimal,  _
                    ByVal im_invoice_no_cn_total As String,  _
                    ByVal im_cn_total As String,  _
                    ByVal ic_bank_acct As String,  _
                    ByVal im_invoice_total_convert As String,  _
                    ByVal im_withholding_opt As String,  _
                    ByVal im_invoice_total_ibg As String,  _
                    ByVal im_invoice_total_casa As String,  _
                    ByVal im_invoice_total_cn_ibg As String,  _
                    ByVal im_invoice_total_cn_casa As String,  _
                    ByVal im_withholding_tax_amt As String,  _
                    ByVal im_withholding_tax As Integer,  _
                    ByVal im_invoice_total_RENTAS As String,  _
                    ByVal im_invoice_total_BC As String,  _
                    ByVal im_invoice_total_cn_RENTAS As String,  _
                    ByVal im_invoice_total_cn_BC As String,  _
                    ByVal IM_INVOICE_TOTAL_NO_TT As String,  _
                    ByVal totalinvamount As String,  _
                    ByVal gstamount As String,  _
                    ByVal im_invoice_no_cn_total_no_gst As String,  _
                    ByVal im_cn_total_no_gst As String,  _
                    ByVal gstamount_cn As String) As dtInvReleasedRow
            Dim rowdtInvReleasedRow As dtInvReleasedRow = CType(Me.NewRow,dtInvReleasedRow)
            Dim columnValuesArray() As Object = New Object() {IM_INVOICE_NO, IM_S_COY_ID, IM_S_COY_NAME, ic_bank_code, bc_bank_name, IM_DOC_DATE, IM_DUE_DATE, IM_PRCS_SENT, IM_PRCS_RECV, IM_CREATED_BY, IM_CURRENCY_CODE, IM_INVOICE_TOTAL, IM_INVOICE_STATUS, IM_INVOICE_TYPE, IM_STATUS_CHANGED_BY, UM_USER_ID, UM_USER_NAME, IM_B_COY_ID, IM_PAYMENT_NO, FOId, IM_PAYMENT_TERM, IM_EXCHANGE_RATE, ForeignCurrency, ForeignAmount, LocalCurrency, LocalAmount, im_invoice_no_cn_total, im_cn_total, ic_bank_acct, im_invoice_total_convert, im_withholding_opt, im_invoice_total_ibg, im_invoice_total_casa, im_invoice_total_cn_ibg, im_invoice_total_cn_casa, im_withholding_tax_amt, im_withholding_tax, im_invoice_total_RENTAS, im_invoice_total_BC, im_invoice_total_cn_RENTAS, im_invoice_total_cn_BC, IM_INVOICE_TOTAL_NO_TT, totalinvamount, gstamount, im_invoice_no_cn_total_no_gst, im_cn_total_no_gst, gstamount_cn}
            rowdtInvReleasedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtInvReleasedRow)
            Return rowdtInvReleasedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUM_USER_ID(ByVal UM_USER_ID As String) As dtInvReleasedRow
            Return CType(Me.Rows.Find(New Object() {UM_USER_ID}),dtInvReleasedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtInvReleasedDataTable = CType(MyBase.Clone,dtInvReleasedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtInvReleasedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIM_INVOICE_NO = MyBase.Columns("IM_INVOICE_NO")
            Me.columnIM_S_COY_ID = MyBase.Columns("IM_S_COY_ID")
            Me.columnIM_S_COY_NAME = MyBase.Columns("IM_S_COY_NAME")
            Me.columnic_bank_code = MyBase.Columns("ic_bank_code")
            Me.columnbc_bank_name = MyBase.Columns("bc_bank_name")
            Me.columnIM_DOC_DATE = MyBase.Columns("IM_DOC_DATE")
            Me.columnIM_DUE_DATE = MyBase.Columns("IM_DUE_DATE")
            Me.columnIM_PRCS_SENT = MyBase.Columns("IM_PRCS_SENT")
            Me.columnIM_PRCS_RECV = MyBase.Columns("IM_PRCS_RECV")
            Me.columnIM_CREATED_BY = MyBase.Columns("IM_CREATED_BY")
            Me.columnIM_CURRENCY_CODE = MyBase.Columns("IM_CURRENCY_CODE")
            Me.columnIM_INVOICE_TOTAL = MyBase.Columns("IM_INVOICE_TOTAL")
            Me.columnIM_INVOICE_STATUS = MyBase.Columns("IM_INVOICE_STATUS")
            Me.columnIM_INVOICE_TYPE = MyBase.Columns("IM_INVOICE_TYPE")
            Me.columnIM_STATUS_CHANGED_BY = MyBase.Columns("IM_STATUS_CHANGED_BY")
            Me.columnUM_USER_ID = MyBase.Columns("UM_USER_ID")
            Me.columnUM_USER_NAME = MyBase.Columns("UM_USER_NAME")
            Me.columnIM_B_COY_ID = MyBase.Columns("IM_B_COY_ID")
            Me.columnIM_PAYMENT_NO = MyBase.Columns("IM_PAYMENT_NO")
            Me.columnFOId = MyBase.Columns("FOId")
            Me.columnIM_PAYMENT_TERM = MyBase.Columns("IM_PAYMENT_TERM")
            Me.columnIM_EXCHANGE_RATE = MyBase.Columns("IM_EXCHANGE_RATE")
            Me.columnForeignCurrency = MyBase.Columns("ForeignCurrency")
            Me.columnForeignAmount = MyBase.Columns("ForeignAmount")
            Me.columnLocalCurrency = MyBase.Columns("LocalCurrency")
            Me.columnLocalAmount = MyBase.Columns("LocalAmount")
            Me.columnim_invoice_no_cn_total = MyBase.Columns("im_invoice_no_cn_total")
            Me.columnim_cn_total = MyBase.Columns("im_cn_total")
            Me.columnic_bank_acct = MyBase.Columns("ic_bank_acct")
            Me.columnim_invoice_total_convert = MyBase.Columns("im_invoice_total_convert")
            Me.columnim_withholding_opt = MyBase.Columns("im_withholding_opt")
            Me.columnim_invoice_total_ibg = MyBase.Columns("im_invoice_total_ibg")
            Me.columnim_invoice_total_casa = MyBase.Columns("im_invoice_total_casa")
            Me.columnim_invoice_total_cn_ibg = MyBase.Columns("im_invoice_total_cn_ibg")
            Me.columnim_invoice_total_cn_casa = MyBase.Columns("im_invoice_total_cn_casa")
            Me.columnim_withholding_tax_amt = MyBase.Columns("im_withholding_tax_amt")
            Me.columnim_withholding_tax = MyBase.Columns("im_withholding_tax")
            Me.columnim_invoice_total_RENTAS = MyBase.Columns("im_invoice_total_RENTAS")
            Me.columnim_invoice_total_BC = MyBase.Columns("im_invoice_total_BC")
            Me.columnim_invoice_total_cn_RENTAS = MyBase.Columns("im_invoice_total_cn_RENTAS")
            Me.columnim_invoice_total_cn_BC = MyBase.Columns("im_invoice_total_cn_BC")
            Me.columnIM_INVOICE_TOTAL_NO_TT = MyBase.Columns("IM_INVOICE_TOTAL_NO_TT")
            Me.columntotalinvamount = MyBase.Columns("totalinvamount")
            Me.columngstamount = MyBase.Columns("gstamount")
            Me.columnim_invoice_no_cn_total_no_gst = MyBase.Columns("im_invoice_no_cn_total_no_gst")
            Me.columnim_cn_total_no_gst = MyBase.Columns("im_cn_total_no_gst")
            Me.columngstamount_cn = MyBase.Columns("gstamount_cn")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIM_INVOICE_NO = New Global.System.Data.DataColumn("IM_INVOICE_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_NO)
            Me.columnIM_S_COY_ID = New Global.System.Data.DataColumn("IM_S_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_S_COY_ID)
            Me.columnIM_S_COY_NAME = New Global.System.Data.DataColumn("IM_S_COY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_S_COY_NAME)
            Me.columnic_bank_code = New Global.System.Data.DataColumn("ic_bank_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_bank_code)
            Me.columnbc_bank_name = New Global.System.Data.DataColumn("bc_bank_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbc_bank_name)
            Me.columnIM_DOC_DATE = New Global.System.Data.DataColumn("IM_DOC_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_DOC_DATE)
            Me.columnIM_DUE_DATE = New Global.System.Data.DataColumn("IM_DUE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_DUE_DATE)
            Me.columnIM_PRCS_SENT = New Global.System.Data.DataColumn("IM_PRCS_SENT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_PRCS_SENT)
            Me.columnIM_PRCS_RECV = New Global.System.Data.DataColumn("IM_PRCS_RECV", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_PRCS_RECV)
            Me.columnIM_CREATED_BY = New Global.System.Data.DataColumn("IM_CREATED_BY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_CREATED_BY)
            Me.columnIM_CURRENCY_CODE = New Global.System.Data.DataColumn("IM_CURRENCY_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_CURRENCY_CODE)
            Me.columnIM_INVOICE_TOTAL = New Global.System.Data.DataColumn("IM_INVOICE_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_TOTAL)
            Me.columnIM_INVOICE_STATUS = New Global.System.Data.DataColumn("IM_INVOICE_STATUS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_STATUS)
            Me.columnIM_INVOICE_TYPE = New Global.System.Data.DataColumn("IM_INVOICE_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_TYPE)
            Me.columnIM_STATUS_CHANGED_BY = New Global.System.Data.DataColumn("IM_STATUS_CHANGED_BY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_STATUS_CHANGED_BY)
            Me.columnUM_USER_ID = New Global.System.Data.DataColumn("UM_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUM_USER_ID)
            Me.columnUM_USER_NAME = New Global.System.Data.DataColumn("UM_USER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUM_USER_NAME)
            Me.columnIM_B_COY_ID = New Global.System.Data.DataColumn("IM_B_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_B_COY_ID)
            Me.columnIM_PAYMENT_NO = New Global.System.Data.DataColumn("IM_PAYMENT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_PAYMENT_NO)
            Me.columnFOId = New Global.System.Data.DataColumn("FOId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOId)
            Me.columnIM_PAYMENT_TERM = New Global.System.Data.DataColumn("IM_PAYMENT_TERM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_PAYMENT_TERM)
            Me.columnIM_EXCHANGE_RATE = New Global.System.Data.DataColumn("IM_EXCHANGE_RATE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_EXCHANGE_RATE)
            Me.columnForeignCurrency = New Global.System.Data.DataColumn("ForeignCurrency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeignCurrency)
            Me.columnForeignAmount = New Global.System.Data.DataColumn("ForeignAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeignAmount)
            Me.columnLocalCurrency = New Global.System.Data.DataColumn("LocalCurrency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalCurrency)
            Me.columnLocalAmount = New Global.System.Data.DataColumn("LocalAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalAmount)
            Me.columnim_invoice_no_cn_total = New Global.System.Data.DataColumn("im_invoice_no_cn_total", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_no_cn_total)
            Me.columnim_cn_total = New Global.System.Data.DataColumn("im_cn_total", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_cn_total)
            Me.columnic_bank_acct = New Global.System.Data.DataColumn("ic_bank_acct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_bank_acct)
            Me.columnim_invoice_total_convert = New Global.System.Data.DataColumn("im_invoice_total_convert", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_convert)
            Me.columnim_withholding_opt = New Global.System.Data.DataColumn("im_withholding_opt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_withholding_opt)
            Me.columnim_invoice_total_ibg = New Global.System.Data.DataColumn("im_invoice_total_ibg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_ibg)
            Me.columnim_invoice_total_casa = New Global.System.Data.DataColumn("im_invoice_total_casa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_casa)
            Me.columnim_invoice_total_cn_ibg = New Global.System.Data.DataColumn("im_invoice_total_cn_ibg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_cn_ibg)
            Me.columnim_invoice_total_cn_casa = New Global.System.Data.DataColumn("im_invoice_total_cn_casa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_cn_casa)
            Me.columnim_withholding_tax_amt = New Global.System.Data.DataColumn("im_withholding_tax_amt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_withholding_tax_amt)
            Me.columnim_withholding_tax = New Global.System.Data.DataColumn("im_withholding_tax", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_withholding_tax)
            Me.columnim_invoice_total_RENTAS = New Global.System.Data.DataColumn("im_invoice_total_RENTAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_RENTAS)
            Me.columnim_invoice_total_BC = New Global.System.Data.DataColumn("im_invoice_total_BC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_BC)
            Me.columnim_invoice_total_cn_RENTAS = New Global.System.Data.DataColumn("im_invoice_total_cn_RENTAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_cn_RENTAS)
            Me.columnim_invoice_total_cn_BC = New Global.System.Data.DataColumn("im_invoice_total_cn_BC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_total_cn_BC)
            Me.columnIM_INVOICE_TOTAL_NO_TT = New Global.System.Data.DataColumn("IM_INVOICE_TOTAL_NO_TT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_TOTAL_NO_TT)
            Me.columntotalinvamount = New Global.System.Data.DataColumn("totalinvamount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalinvamount)
            Me.columngstamount = New Global.System.Data.DataColumn("gstamount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngstamount)
            Me.columnim_invoice_no_cn_total_no_gst = New Global.System.Data.DataColumn("im_invoice_no_cn_total_no_gst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_invoice_no_cn_total_no_gst)
            Me.columnim_cn_total_no_gst = New Global.System.Data.DataColumn("im_cn_total_no_gst", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnim_cn_total_no_gst)
            Me.columngstamount_cn = New Global.System.Data.DataColumn("gstamount_cn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngstamount_cn)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUM_USER_ID}, true))
            Me.columnIM_INVOICE_NO.MaxLength = 50
            Me.columnIM_S_COY_ID.MaxLength = 20
            Me.columnIM_S_COY_NAME.MaxLength = 100
            Me.columnic_bank_code.MaxLength = 30
            Me.columnbc_bank_name.MaxLength = 100
            Me.columnIM_CREATED_BY.MaxLength = 20
            Me.columnIM_CURRENCY_CODE.MaxLength = 10
            Me.columnIM_INVOICE_TYPE.MaxLength = 6
            Me.columnIM_STATUS_CHANGED_BY.MaxLength = 20
            Me.columnUM_USER_ID.AllowDBNull = false
            Me.columnUM_USER_ID.Unique = true
            Me.columnUM_USER_ID.MaxLength = 20
            Me.columnUM_USER_NAME.MaxLength = 100
            Me.columnIM_B_COY_ID.MaxLength = 20
            Me.columnIM_PAYMENT_NO.MaxLength = 40
            Me.columnFOId.AllowDBNull = false
            Me.columnIM_PAYMENT_TERM.MaxLength = 10
            Me.columnForeignCurrency.MaxLength = 10
            Me.columnForeignAmount.MaxLength = 61
            Me.columnLocalCurrency.AllowDBNull = false
            Me.columnLocalCurrency.MaxLength = 3
            Me.columnim_invoice_no_cn_total.AllowDBNull = false
            Me.columnim_cn_total.AllowDBNull = false
            Me.columnic_bank_acct.MaxLength = 30
            Me.columnim_invoice_total_convert.AllowDBNull = false
            Me.columnim_withholding_opt.AllowDBNull = false
            Me.columnim_invoice_total_ibg.AllowDBNull = false
            Me.columnim_invoice_total_casa.AllowDBNull = false
            Me.columnim_invoice_total_cn_ibg.AllowDBNull = false
            Me.columnim_invoice_total_cn_casa.AllowDBNull = false
            Me.columnim_withholding_tax_amt.AllowDBNull = false
            Me.columnim_invoice_total_RENTAS.AllowDBNull = false
            Me.columnim_invoice_total_BC.AllowDBNull = false
            Me.columnim_invoice_total_cn_RENTAS.AllowDBNull = false
            Me.columnim_invoice_total_cn_BC.AllowDBNull = false
            Me.columnIM_INVOICE_TOTAL_NO_TT.AllowDBNull = false
            Me.columnim_invoice_no_cn_total_no_gst.AllowDBNull = false
            Me.columnim_cn_total_no_gst.AllowDBNull = false
            Me.columngstamount_cn.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtInvReleasedRow() As dtInvReleasedRow
            Return CType(Me.NewRow,dtInvReleasedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtInvReleasedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtInvReleasedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtInvReleasedRowChangedEvent) Is Nothing) Then
                RaiseEvent dtInvReleasedRowChanged(Me, New dtInvReleasedRowChangeEvent(CType(e.Row,dtInvReleasedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtInvReleasedRowChangingEvent) Is Nothing) Then
                RaiseEvent dtInvReleasedRowChanging(Me, New dtInvReleasedRowChangeEvent(CType(e.Row,dtInvReleasedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtInvReleasedRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtInvReleasedRowDeleted(Me, New dtInvReleasedRowChangeEvent(CType(e.Row,dtInvReleasedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtInvReleasedRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtInvReleasedRowDeleting(Me, New dtInvReleasedRowChangeEvent(CType(e.Row,dtInvReleasedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtInvReleasedRow(ByVal row As dtInvReleasedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As InvReleased = New InvReleased
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtInvReleasedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtInvReleasedRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtInvReleased As dtInvReleasedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtInvReleased = CType(Me.Table,dtInvReleasedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_INVOICE_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_NO' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_S_COY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_S_COY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_S_COY_ID' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_S_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_S_COY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_S_COY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_S_COY_NAME' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_S_COY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_bank_code() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.ic_bank_codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_bank_code' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.ic_bank_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bc_bank_name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.bc_bank_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bc_bank_name' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.bc_bank_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_DOC_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_DOC_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_DOC_DATE' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_DOC_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_DUE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_DUE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_DUE_DATE' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_DUE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PRCS_SENT() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_PRCS_SENTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_PRCS_SENT' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_PRCS_SENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PRCS_RECV() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_PRCS_RECVColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_PRCS_RECV' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_PRCS_RECVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CREATED_BY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_CREATED_BYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_CREATED_BY' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_CREATED_BYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CURRENCY_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_CURRENCY_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_CURRENCY_CODE' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_CURRENCY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_INVOICE_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_TOTAL' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_INVOICE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_STATUS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_INVOICE_STATUSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_STATUS' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_INVOICE_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_INVOICE_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_TYPE' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_INVOICE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_STATUS_CHANGED_BY() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_STATUS_CHANGED_BYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_STATUS_CHANGED_BY' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_STATUS_CHANGED_BYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UM_USER_ID() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.UM_USER_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.UM_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UM_USER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.UM_USER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UM_USER_NAME' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.UM_USER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_B_COY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_B_COY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_B_COY_ID' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_B_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PAYMENT_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_PAYMENT_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_PAYMENT_NO' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_PAYMENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOId() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.FOIdColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.FOIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PAYMENT_TERM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_PAYMENT_TERMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_PAYMENT_TERM' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_PAYMENT_TERMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_EXCHANGE_RATE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.IM_EXCHANGE_RATEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_EXCHANGE_RATE' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_EXCHANGE_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ForeignCurrency() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.ForeignCurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForeignCurrency' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.ForeignCurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ForeignAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.ForeignAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForeignAmount' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.ForeignAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalCurrency() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.LocalCurrencyColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.LocalCurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.LocalAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocalAmount' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.LocalAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_no_cn_total() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_no_cn_totalColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_no_cn_totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_cn_total() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_cn_totalColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_cn_totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_bank_acct() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.ic_bank_acctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_bank_acct' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.ic_bank_acctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_convert() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_convertColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_convertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_withholding_opt() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_withholding_optColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_withholding_optColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_ibg() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_ibgColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_ibgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_casa() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_casaColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_casaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_cn_ibg() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_cn_ibgColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_cn_ibgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_cn_casa() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_cn_casaColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_cn_casaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_withholding_tax_amt() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_withholding_tax_amtColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_withholding_tax_amtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_withholding_tax() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.im_withholding_taxColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'im_withholding_tax' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.im_withholding_taxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_RENTAS() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_RENTASColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_RENTASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_BC() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_BCColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_BCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_cn_RENTAS() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_cn_RENTASColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_cn_RENTASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_total_cn_BC() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_total_cn_BCColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_total_cn_BCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_TOTAL_NO_TT() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.IM_INVOICE_TOTAL_NO_TTColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.IM_INVOICE_TOTAL_NO_TTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalinvamount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.totalinvamountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totalinvamount' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.totalinvamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gstamount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtInvReleased.gstamountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gstamount' in table 'dtInvReleased' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtInvReleased.gstamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_invoice_no_cn_total_no_gst() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_invoice_no_cn_total_no_gstColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_invoice_no_cn_total_no_gstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property im_cn_total_no_gst() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.im_cn_total_no_gstColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.im_cn_total_no_gstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gstamount_cn() As String
            Get
                Return CType(Me(Me.tabledtInvReleased.gstamount_cnColumn),String)
            End Get
            Set
                Me(Me.tabledtInvReleased.gstamount_cnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_NONull()
            Me(Me.tabledtInvReleased.IM_INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_S_COY_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_S_COY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_S_COY_IDNull()
            Me(Me.tabledtInvReleased.IM_S_COY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_S_COY_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_S_COY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_S_COY_NAMENull()
            Me(Me.tabledtInvReleased.IM_S_COY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_bank_codeNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.ic_bank_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_bank_codeNull()
            Me(Me.tabledtInvReleased.ic_bank_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbc_bank_nameNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.bc_bank_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbc_bank_nameNull()
            Me(Me.tabledtInvReleased.bc_bank_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_DOC_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_DOC_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_DOC_DATENull()
            Me(Me.tabledtInvReleased.IM_DOC_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_DUE_DATENull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_DUE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_DUE_DATENull()
            Me(Me.tabledtInvReleased.IM_DUE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_PRCS_SENTNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_PRCS_SENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_PRCS_SENTNull()
            Me(Me.tabledtInvReleased.IM_PRCS_SENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_PRCS_RECVNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_PRCS_RECVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_PRCS_RECVNull()
            Me(Me.tabledtInvReleased.IM_PRCS_RECVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_CREATED_BYNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_CREATED_BYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_CREATED_BYNull()
            Me(Me.tabledtInvReleased.IM_CREATED_BYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_CURRENCY_CODENull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_CURRENCY_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_CURRENCY_CODENull()
            Me(Me.tabledtInvReleased.IM_CURRENCY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_INVOICE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_TOTALNull()
            Me(Me.tabledtInvReleased.IM_INVOICE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_STATUSNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_INVOICE_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_STATUSNull()
            Me(Me.tabledtInvReleased.IM_INVOICE_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_TYPENull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_INVOICE_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_TYPENull()
            Me(Me.tabledtInvReleased.IM_INVOICE_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_STATUS_CHANGED_BYNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_STATUS_CHANGED_BYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_STATUS_CHANGED_BYNull()
            Me(Me.tabledtInvReleased.IM_STATUS_CHANGED_BYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUM_USER_NAMENull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.UM_USER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUM_USER_NAMENull()
            Me(Me.tabledtInvReleased.UM_USER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_B_COY_IDNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_B_COY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_B_COY_IDNull()
            Me(Me.tabledtInvReleased.IM_B_COY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_PAYMENT_NONull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_PAYMENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_PAYMENT_NONull()
            Me(Me.tabledtInvReleased.IM_PAYMENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_PAYMENT_TERMNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_PAYMENT_TERMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_PAYMENT_TERMNull()
            Me(Me.tabledtInvReleased.IM_PAYMENT_TERMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_EXCHANGE_RATENull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.IM_EXCHANGE_RATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_EXCHANGE_RATENull()
            Me(Me.tabledtInvReleased.IM_EXCHANGE_RATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsForeignCurrencyNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.ForeignCurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetForeignCurrencyNull()
            Me(Me.tabledtInvReleased.ForeignCurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsForeignAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.ForeignAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetForeignAmountNull()
            Me(Me.tabledtInvReleased.ForeignAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalAmountNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.LocalAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalAmountNull()
            Me(Me.tabledtInvReleased.LocalAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_bank_acctNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.ic_bank_acctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_bank_acctNull()
            Me(Me.tabledtInvReleased.ic_bank_acctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isim_withholding_taxNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.im_withholding_taxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setim_withholding_taxNull()
            Me(Me.tabledtInvReleased.im_withholding_taxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalinvamountNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.totalinvamountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalinvamountNull()
            Me(Me.tabledtInvReleased.totalinvamountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgstamountNull() As Boolean
            Return Me.IsNull(Me.tabledtInvReleased.gstamountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgstamountNull()
            Me(Me.tabledtInvReleased.gstamountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtInvReleasedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtInvReleasedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtInvReleasedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtInvReleasedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace InvReleasedTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtInvReleasedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtInvReleased"
            tableMapping.ColumnMappings.Add("IM_INVOICE_NO", "IM_INVOICE_NO")
            tableMapping.ColumnMappings.Add("IM_S_COY_ID", "IM_S_COY_ID")
            tableMapping.ColumnMappings.Add("IM_S_COY_NAME", "IM_S_COY_NAME")
            tableMapping.ColumnMappings.Add("ic_bank_code", "ic_bank_code")
            tableMapping.ColumnMappings.Add("bc_bank_name", "bc_bank_name")
            tableMapping.ColumnMappings.Add("IM_DOC_DATE", "IM_DOC_DATE")
            tableMapping.ColumnMappings.Add("IM_DUE_DATE", "IM_DUE_DATE")
            tableMapping.ColumnMappings.Add("IM_PRCS_SENT", "IM_PRCS_SENT")
            tableMapping.ColumnMappings.Add("IM_PRCS_RECV", "IM_PRCS_RECV")
            tableMapping.ColumnMappings.Add("IM_CREATED_BY", "IM_CREATED_BY")
            tableMapping.ColumnMappings.Add("IM_CURRENCY_CODE", "IM_CURRENCY_CODE")
            tableMapping.ColumnMappings.Add("IM_INVOICE_TOTAL", "IM_INVOICE_TOTAL")
            tableMapping.ColumnMappings.Add("IM_INVOICE_STATUS", "IM_INVOICE_STATUS")
            tableMapping.ColumnMappings.Add("IM_INVOICE_TYPE", "IM_INVOICE_TYPE")
            tableMapping.ColumnMappings.Add("IM_STATUS_CHANGED_BY", "IM_STATUS_CHANGED_BY")
            tableMapping.ColumnMappings.Add("UM_USER_ID", "UM_USER_ID")
            tableMapping.ColumnMappings.Add("UM_USER_NAME", "UM_USER_NAME")
            tableMapping.ColumnMappings.Add("IM_B_COY_ID", "IM_B_COY_ID")
            tableMapping.ColumnMappings.Add("IM_PAYMENT_NO", "IM_PAYMENT_NO")
            tableMapping.ColumnMappings.Add("FOId", "FOId")
            tableMapping.ColumnMappings.Add("IM_PAYMENT_TERM", "IM_PAYMENT_TERM")
            tableMapping.ColumnMappings.Add("IM_EXCHANGE_RATE", "IM_EXCHANGE_RATE")
            tableMapping.ColumnMappings.Add("ForeignCurrency", "ForeignCurrency")
            tableMapping.ColumnMappings.Add("ForeignAmount", "ForeignAmount")
            tableMapping.ColumnMappings.Add("LocalCurrency", "LocalCurrency")
            tableMapping.ColumnMappings.Add("LocalAmount", "LocalAmount")
            tableMapping.ColumnMappings.Add("im_invoice_no_cn_total", "im_invoice_no_cn_total")
            tableMapping.ColumnMappings.Add("im_cn_total", "im_cn_total")
            tableMapping.ColumnMappings.Add("ic_bank_acct", "ic_bank_acct")
            tableMapping.ColumnMappings.Add("im_invoice_total_convert", "im_invoice_total_convert")
            tableMapping.ColumnMappings.Add("im_withholding_opt", "im_withholding_opt")
            tableMapping.ColumnMappings.Add("im_invoice_total_ibg", "im_invoice_total_ibg")
            tableMapping.ColumnMappings.Add("im_invoice_total_casa", "im_invoice_total_casa")
            tableMapping.ColumnMappings.Add("im_invoice_total_cn_ibg", "im_invoice_total_cn_ibg")
            tableMapping.ColumnMappings.Add("im_invoice_total_cn_casa", "im_invoice_total_cn_casa")
            tableMapping.ColumnMappings.Add("im_withholding_tax_amt", "im_withholding_tax_amt")
            tableMapping.ColumnMappings.Add("im_withholding_tax", "im_withholding_tax")
            tableMapping.ColumnMappings.Add("im_invoice_total_BC", "im_invoice_total_BC")
            tableMapping.ColumnMappings.Add("im_invoice_total_RENTAS", "im_invoice_total_RENTAS")
            tableMapping.ColumnMappings.Add("im_invoice_total_cn_RENTAS", "im_invoice_total_cn_RENTAS")
            tableMapping.ColumnMappings.Add("im_invoice_total_cn_BC", "im_invoice_total_cn_BC")
            tableMapping.ColumnMappings.Add("IM_INVOICE_TOTAL_NO_TT", "IM_INVOICE_TOTAL_NO_TT")
            tableMapping.ColumnMappings.Add("im_invoice_no_cn_total_no_gst", "im_invoice_no_cn_total_no_gst")
            tableMapping.ColumnMappings.Add("im_cn_total_no_gst", "im_cn_total_no_gst")
            tableMapping.ColumnMappings.Add("gstamount_cn", "gstamount_cn")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString1").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     invoice_mstr.IM_INVOICE_NO, invoice_mstr.IM_S_COY_ID, invoice_mstr.IM_"& _ 
                "S_COY_NAME, ipp_company.ic_bank_code, bank_code.bc_bank_name,ipp_company.ic_bank"& _ 
                "_acct,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      invoice_mstr.IM_DOC_DATE, invoice_mstr.IM_DUE_DATE"& _ 
                ", invoice_mstr.IM_PRCS_SENT, invoice_mstr.IM_PRCS_RECV, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "invoice_mstr.IM_CREATED_BY, invoice_mstr.IM_CURRENCY_CODE, invoice_mstr.IM_INVOI"& _ 
                "CE_TOTAL, invoice_mstr.IM_EXCHANGE_RATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      invoice_mstr.IM"& _ 
                "_INVOICE_STATUS, invoice_mstr.IM_INVOICE_TYPE, invoice_mstr.IM_STATUS_CHANGED_BY"& _ 
                ", user_mstr.UM_USER_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      user_mstr.UM_USER_NAME, invoice_"& _ 
                "mstr.IM_B_COY_ID, invoice_mstr.IM_PAYMENT_TERM, invoice_mstr.IM_PAYMENT_NO, '' A"& _ 
                "S FOId, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      invoice_mstr.IM_CURRENCY_CODE AS ForeignCurrency"& _ 
                ", FORMAT(invoice_mstr.IM_INVOICE_TOTAL, 2) AS ForeignAmount, 'MYR' AS LocalCurre"& _ 
                "ncy, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      invoice_mstr.IM_INVOICE_TOTAL AS LocalAmount,'' as "& _ 
                "im_invoice_no_cn_total,'' as im_cn_total,'' as im_invoice_total_ibg,'' as im_inv"& _ 
                "oice_total_BC,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'' as im_invoice_total_RENTAS, '' as im_invoice_total_casa,'' as"& _ 
                " im_invoice_total_cn_ibg,'' as im_invoice_total_cn_casa,'' as im_invoice_total_c"& _ 
                "n_RENTAS,'' as im_invoice_total_cn_BC,'' as im_invoice_total_convert,'' as im_wi"& _ 
                "thholding_tax_amt,im_withholding_tax,'' as im_withholding_opt, '' as IM_INVOICE_"& _ 
                "TOTAL_NO_TT, '' AS im_invoice_no_cn_total_no_gst, '' AS im_cn_total_no_gst, '' a"& _ 
                "s gstamount_cn"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         invoice_mstr LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " ipp_company ON invoice_mstr.IM_S_COY_ID = ipp_company.ic_index AND invoice_mstr"& _ 
                ".IM_B_COY_ID = ipp_company.ic_coy_id LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      bank"& _ 
                "_code ON ipp_company.ic_bank_code = bank_code.bc_bank_code AND invoice_mstr.IM_B"& _ 
                "_COY_ID = bank_code.bc_coy_id INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      user_mstr ON inv"& _ 
                "oice_mstr.IM_STATUS_CHANGED_BY = user_mstr.UM_USER_ID AND invoice_mstr.IM_B_COY_"& _ 
                "ID = user_mstr.UM_COY_ID AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      user_mstr.UM_DELETED = 'N' "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      users_usrgrp ON users_usrgrp.UU_USER_ID = user"& _ 
                "_mstr.UM_USER_ID AND users_usrgrp.UU_COY_ID = user_mstr.UM_COY_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                    user_group_mstr ON users_usrgrp.UU_USRGRP_ID = user_group_ms"& _ 
                "tr.UGM_USRGRP_ID AND user_group_mstr.UGM_DELETED = 'N'"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (invoice_mstr."& _ 
                "IM_INVOICE_TYPE IS NOT NULL) AND (user_group_mstr.UGM_FIXED_ROLE = 'Finance Mana"& _ 
                "ger') AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (invoice_mstr.IM_B_COY_ID = 'hlb') AND (invoic"& _ 
                "e_mstr.IM_INVOICE_STATUS = 13)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As InvReleased.dtInvReleasedDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As InvReleased.dtInvReleasedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As InvReleased.dtInvReleasedDataTable = New InvReleased.dtInvReleasedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
