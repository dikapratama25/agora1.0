'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("IssuingTrend"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class IssuingTrend
    Inherits Global.System.Data.DataSet
    
    Private tableDataSetIssuingTrend As DataSetIssuingTrendDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataSetIssuingTrend")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetIssuingTrendDataTable(ds.Tables("DataSetIssuingTrend")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataSetIssuingTrend() As DataSetIssuingTrendDataTable
        Get
            Return Me.tableDataSetIssuingTrend
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As IssuingTrend = CType(MyBase.Clone,IssuingTrend)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataSetIssuingTrend")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetIssuingTrendDataTable(ds.Tables("DataSetIssuingTrend")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataSetIssuingTrend = CType(MyBase.Tables("DataSetIssuingTrend"),DataSetIssuingTrendDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataSetIssuingTrend) Is Nothing) Then
                Me.tableDataSetIssuingTrend.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "IssuingTrend"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/IssuingTrend.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataSetIssuingTrend = New DataSetIssuingTrendDataTable
        MyBase.Tables.Add(Me.tableDataSetIssuingTrend)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataSetIssuingTrend() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As IssuingTrend = New IssuingTrend
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataSetIssuingTrendRowChangeEventHandler(ByVal sender As Object, ByVal e As DataSetIssuingTrendRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataSetIssuingTrendDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIM_ITEM_CODE As Global.System.Data.DataColumn
        
        Private columnPAST_6TH_IRSD_QTY As Global.System.Data.DataColumn
        
        Private columnPAST_5TH_IRSD_QTY As Global.System.Data.DataColumn
        
        Private columnPAST_4TH_IRSD_QTY As Global.System.Data.DataColumn
        
        Private columnPAST_3RD_IRSD_QTY As Global.System.Data.DataColumn
        
        Private columnPAST_2ND_IRSD_QTY As Global.System.Data.DataColumn
        
        Private columnPAST_1ST_IRSD_QTY As Global.System.Data.DataColumn
        
        Private columnCURR_MTH_IRSD_QTY As Global.System.Data.DataColumn
        
        Private columnIRSM_IRS_APPROVED_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataSetIssuingTrend"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_ITEM_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_ITEM_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAST_6TH_IRSD_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAST_6TH_IRSD_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAST_5TH_IRSD_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAST_5TH_IRSD_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAST_4TH_IRSD_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAST_4TH_IRSD_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAST_3RD_IRSD_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAST_3RD_IRSD_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAST_2ND_IRSD_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAST_2ND_IRSD_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAST_1ST_IRSD_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAST_1ST_IRSD_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_MTH_IRSD_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_MTH_IRSD_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IRSM_IRS_APPROVED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRSM_IRS_APPROVED_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataSetIssuingTrendRow
            Get
                Return CType(Me.Rows(index),DataSetIssuingTrendRow)
            End Get
        End Property
        
        Public Event DataSetIssuingTrendRowChanging As DataSetIssuingTrendRowChangeEventHandler
        
        Public Event DataSetIssuingTrendRowChanged As DataSetIssuingTrendRowChangeEventHandler
        
        Public Event DataSetIssuingTrendRowDeleting As DataSetIssuingTrendRowChangeEventHandler
        
        Public Event DataSetIssuingTrendRowDeleted As DataSetIssuingTrendRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataSetIssuingTrendRow(ByVal row As DataSetIssuingTrendRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataSetIssuingTrendRow(ByVal IM_ITEM_CODE As String, ByVal PAST_6TH_IRSD_QTY As String, ByVal PAST_5TH_IRSD_QTY As String, ByVal PAST_4TH_IRSD_QTY As String, ByVal PAST_3RD_IRSD_QTY As String, ByVal PAST_2ND_IRSD_QTY As String, ByVal PAST_1ST_IRSD_QTY As String, ByVal CURR_MTH_IRSD_QTY As String, ByVal IRSM_IRS_APPROVED_DATE As String) As DataSetIssuingTrendRow
            Dim rowDataSetIssuingTrendRow As DataSetIssuingTrendRow = CType(Me.NewRow,DataSetIssuingTrendRow)
            Dim columnValuesArray() As Object = New Object() {IM_ITEM_CODE, PAST_6TH_IRSD_QTY, PAST_5TH_IRSD_QTY, PAST_4TH_IRSD_QTY, PAST_3RD_IRSD_QTY, PAST_2ND_IRSD_QTY, PAST_1ST_IRSD_QTY, CURR_MTH_IRSD_QTY, IRSM_IRS_APPROVED_DATE}
            rowDataSetIssuingTrendRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataSetIssuingTrendRow)
            Return rowDataSetIssuingTrendRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataSetIssuingTrendDataTable = CType(MyBase.Clone,DataSetIssuingTrendDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataSetIssuingTrendDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIM_ITEM_CODE = MyBase.Columns("IM_ITEM_CODE")
            Me.columnPAST_6TH_IRSD_QTY = MyBase.Columns("PAST_6TH_IRSD_QTY")
            Me.columnPAST_5TH_IRSD_QTY = MyBase.Columns("PAST_5TH_IRSD_QTY")
            Me.columnPAST_4TH_IRSD_QTY = MyBase.Columns("PAST_4TH_IRSD_QTY")
            Me.columnPAST_3RD_IRSD_QTY = MyBase.Columns("PAST_3RD_IRSD_QTY")
            Me.columnPAST_2ND_IRSD_QTY = MyBase.Columns("PAST_2ND_IRSD_QTY")
            Me.columnPAST_1ST_IRSD_QTY = MyBase.Columns("PAST_1ST_IRSD_QTY")
            Me.columnCURR_MTH_IRSD_QTY = MyBase.Columns("CURR_MTH_IRSD_QTY")
            Me.columnIRSM_IRS_APPROVED_DATE = MyBase.Columns("IRSM_IRS_APPROVED_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIM_ITEM_CODE = New Global.System.Data.DataColumn("IM_ITEM_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_ITEM_CODE)
            Me.columnPAST_6TH_IRSD_QTY = New Global.System.Data.DataColumn("PAST_6TH_IRSD_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAST_6TH_IRSD_QTY)
            Me.columnPAST_5TH_IRSD_QTY = New Global.System.Data.DataColumn("PAST_5TH_IRSD_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAST_5TH_IRSD_QTY)
            Me.columnPAST_4TH_IRSD_QTY = New Global.System.Data.DataColumn("PAST_4TH_IRSD_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAST_4TH_IRSD_QTY)
            Me.columnPAST_3RD_IRSD_QTY = New Global.System.Data.DataColumn("PAST_3RD_IRSD_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAST_3RD_IRSD_QTY)
            Me.columnPAST_2ND_IRSD_QTY = New Global.System.Data.DataColumn("PAST_2ND_IRSD_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAST_2ND_IRSD_QTY)
            Me.columnPAST_1ST_IRSD_QTY = New Global.System.Data.DataColumn("PAST_1ST_IRSD_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAST_1ST_IRSD_QTY)
            Me.columnCURR_MTH_IRSD_QTY = New Global.System.Data.DataColumn("CURR_MTH_IRSD_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_MTH_IRSD_QTY)
            Me.columnIRSM_IRS_APPROVED_DATE = New Global.System.Data.DataColumn("IRSM_IRS_APPROVED_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRSM_IRS_APPROVED_DATE)
            Me.columnIM_ITEM_CODE.AllowDBNull = false
            Me.columnPAST_6TH_IRSD_QTY.AllowDBNull = false
            Me.columnPAST_5TH_IRSD_QTY.AllowDBNull = false
            Me.columnPAST_4TH_IRSD_QTY.AllowDBNull = false
            Me.columnPAST_3RD_IRSD_QTY.AllowDBNull = false
            Me.columnPAST_2ND_IRSD_QTY.AllowDBNull = false
            Me.columnPAST_1ST_IRSD_QTY.AllowDBNull = false
            Me.columnCURR_MTH_IRSD_QTY.AllowDBNull = false
            Me.columnIRSM_IRS_APPROVED_DATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataSetIssuingTrendRow() As DataSetIssuingTrendRow
            Return CType(Me.NewRow,DataSetIssuingTrendRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataSetIssuingTrendRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataSetIssuingTrendRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataSetIssuingTrendRowChangedEvent) Is Nothing) Then
                RaiseEvent DataSetIssuingTrendRowChanged(Me, New DataSetIssuingTrendRowChangeEvent(CType(e.Row,DataSetIssuingTrendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataSetIssuingTrendRowChangingEvent) Is Nothing) Then
                RaiseEvent DataSetIssuingTrendRowChanging(Me, New DataSetIssuingTrendRowChangeEvent(CType(e.Row,DataSetIssuingTrendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataSetIssuingTrendRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataSetIssuingTrendRowDeleted(Me, New DataSetIssuingTrendRowChangeEvent(CType(e.Row,DataSetIssuingTrendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataSetIssuingTrendRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataSetIssuingTrendRowDeleting(Me, New DataSetIssuingTrendRowChangeEvent(CType(e.Row,DataSetIssuingTrendRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataSetIssuingTrendRow(ByVal row As DataSetIssuingTrendRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As IssuingTrend = New IssuingTrend
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataSetIssuingTrendDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataSetIssuingTrendRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataSetIssuingTrend As DataSetIssuingTrendDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataSetIssuingTrend = CType(Me.Table,DataSetIssuingTrendDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_ITEM_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.IM_ITEM_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.IM_ITEM_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAST_6TH_IRSD_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.PAST_6TH_IRSD_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.PAST_6TH_IRSD_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAST_5TH_IRSD_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.PAST_5TH_IRSD_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.PAST_5TH_IRSD_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAST_4TH_IRSD_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.PAST_4TH_IRSD_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.PAST_4TH_IRSD_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAST_3RD_IRSD_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.PAST_3RD_IRSD_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.PAST_3RD_IRSD_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAST_2ND_IRSD_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.PAST_2ND_IRSD_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.PAST_2ND_IRSD_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAST_1ST_IRSD_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.PAST_1ST_IRSD_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.PAST_1ST_IRSD_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_MTH_IRSD_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.CURR_MTH_IRSD_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.CURR_MTH_IRSD_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IRSM_IRS_APPROVED_DATE() As String
            Get
                Return CType(Me(Me.tableDataSetIssuingTrend.IRSM_IRS_APPROVED_DATEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetIssuingTrend.IRSM_IRS_APPROVED_DATEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataSetIssuingTrendRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataSetIssuingTrendRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataSetIssuingTrendRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataSetIssuingTrendRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace IssuingTrendTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataSetIssuingTrendTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataSetIssuingTrend"
            tableMapping.ColumnMappings.Add("IM_ITEM_CODE", "IM_ITEM_CODE")
            tableMapping.ColumnMappings.Add("PAST_6TH_IRSD_QTY", "PAST_6TH_IRSD_QTY")
            tableMapping.ColumnMappings.Add("PAST_5TH_IRSD_QTY", "PAST_5TH_IRSD_QTY")
            tableMapping.ColumnMappings.Add("PAST_4TH_IRSD_QTY", "PAST_4TH_IRSD_QTY")
            tableMapping.ColumnMappings.Add("PAST_3RD_IRSD_QTY", "PAST_3RD_IRSD_QTY")
            tableMapping.ColumnMappings.Add("PAST_2ND_IRSD_QTY", "PAST_2ND_IRSD_QTY")
            tableMapping.ColumnMappings.Add("PAST_1ST_IRSD_QTY", "PAST_1ST_IRSD_QTY")
            tableMapping.ColumnMappings.Add("CURR_MTH_IRSD_QTY", "CURR_MTH_IRSD_QTY")
            tableMapping.ColumnMappings.Add("IRSM_IRS_APPROVED_DATE", "IRSM_IRS_APPROVED_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString1").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT '' AS IM_ITEM_CODE, '' AS PAST_6TH_IRSD_QTY, '' AS PAST_5TH_IRSD_QTY, '' A"& _ 
                "S PAST_4TH_IRSD_QTY, '' AS PAST_3RD_IRSD_QTY, '' AS PAST_2ND_IRSD_QTY, '' AS PAS"& _ 
                "T_1ST_IRSD_QTY, '' AS CURR_MTH_IRSD_QTY, '' AS IRSM_IRS_APPROVED_DATE FROM INVEN"& _ 
                "TORY_MSTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As IssuingTrend.DataSetIssuingTrendDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As IssuingTrend.DataSetIssuingTrendDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As IssuingTrend.DataSetIssuingTrendDataTable = New IssuingTrend.DataSetIssuingTrendDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
