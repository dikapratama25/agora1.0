'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("OverdueInv"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class OverdueInv
    Inherits Global.System.Data.DataSet
    
    Private tableDataSetOverdueInv As DataSetOverdueInvDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataSetOverdueInv")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetOverdueInvDataTable(ds.Tables("DataSetOverdueInv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataSetOverdueInv() As DataSetOverdueInvDataTable
        Get
            Return Me.tableDataSetOverdueInv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As OverdueInv = CType(MyBase.Clone,OverdueInv)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataSetOverdueInv")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetOverdueInvDataTable(ds.Tables("DataSetOverdueInv")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataSetOverdueInv = CType(MyBase.Tables("DataSetOverdueInv"),DataSetOverdueInvDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataSetOverdueInv) Is Nothing) Then
                Me.tableDataSetOverdueInv.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "OverdueInv"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/OverdueInv.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataSetOverdueInv = New DataSetOverdueInvDataTable
        MyBase.Tables.Add(Me.tableDataSetOverdueInv)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataSetOverdueInv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As OverdueInv = New OverdueInv
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataSetOverdueInvRowChangeEventHandler(ByVal sender As Object, ByVal e As DataSetOverdueInvRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataSetOverdueInvDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCM_COY_NAME As Global.System.Data.DataColumn
        
        Private columnCM_COY_ID As Global.System.Data.DataColumn
        
        Private columnPOD_PO_NO As Global.System.Data.DataColumn
        
        Private columnPOD_COY_ID As Global.System.Data.DataColumn
        
        Private columnPOD_PO_LINE As Global.System.Data.DataColumn
        
        Private columnPOM_PO_NO As Global.System.Data.DataColumn
        
        Private columnPOM_B_COY_ID As Global.System.Data.DataColumn
        
        Private columnPOM_S_COY_ID As Global.System.Data.DataColumn
        
        Private columnPOM_S_COY_NAME As Global.System.Data.DataColumn
        
        Private columnPOM_PO_DATE As Global.System.Data.DataColumn
        
        Private columnPOM_PAYMENT_METHOD As Global.System.Data.DataColumn
        
        Private columnPOD_ETD As Global.System.Data.DataColumn
        
        Private columnID_INVOICE_NO As Global.System.Data.DataColumn
        
        Private columnID_S_COY_ID As Global.System.Data.DataColumn
        
        Private columnID_PO_LINE As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_NO As Global.System.Data.DataColumn
        
        Private columnIM_S_COY_ID As Global.System.Data.DataColumn
        
        Private columnIM_S_COY_NAME As Global.System.Data.DataColumn
        
        Private columnPOM_PO_INDEX As Global.System.Data.DataColumn
        
        Private columnIM_PO_INDEX As Global.System.Data.DataColumn
        
        Private columnIM_B_COY_ID As Global.System.Data.DataColumn
        
        Private columnIM_PAYMENT_DATE As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_STATUS As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_TOTAL As Global.System.Data.DataColumn
        
        Private columnIM_CURRENCY_CODE As Global.System.Data.DataColumn
        
        Private columnIM_CREATED_ON As Global.System.Data.DataColumn
        
        Private columnPOM_CREATED_DATE As Global.System.Data.DataColumn
        
        Private columnSTATUS_DESC As Global.System.Data.DataColumn
        
        Private columnPOM_CURRENCY_CODE As Global.System.Data.DataColumn
        
        Private columnINVOICE_AMT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataSetOverdueInv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CM_COY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCM_COY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CM_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCM_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_PO_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOD_PO_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOD_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_PO_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOD_PO_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_PO_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_PO_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_B_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_B_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_S_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_S_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_S_COY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_S_COY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_PO_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_PO_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_PAYMENT_METHODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_PAYMENT_METHOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_ETDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOD_ETD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_INVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_S_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_S_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_PO_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PO_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_S_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_S_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_S_COY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_S_COY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_PO_INDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_PO_INDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_PO_INDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_PO_INDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_B_COY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_B_COY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_PAYMENT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_PAYMENT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_CURRENCY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_CURRENCY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_CREATED_ONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_CREATED_ON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_CREATED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_CREATED_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_CURRENCY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOM_CURRENCY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataSetOverdueInvRow
            Get
                Return CType(Me.Rows(index),DataSetOverdueInvRow)
            End Get
        End Property
        
        Public Event DataSetOverdueInvRowChanging As DataSetOverdueInvRowChangeEventHandler
        
        Public Event DataSetOverdueInvRowChanged As DataSetOverdueInvRowChangeEventHandler
        
        Public Event DataSetOverdueInvRowDeleting As DataSetOverdueInvRowChangeEventHandler
        
        Public Event DataSetOverdueInvRowDeleted As DataSetOverdueInvRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataSetOverdueInvRow(ByVal row As DataSetOverdueInvRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataSetOverdueInvRow( _
                    ByVal CM_COY_NAME As String,  _
                    ByVal CM_COY_ID As String,  _
                    ByVal POD_PO_NO As String,  _
                    ByVal POD_COY_ID As String,  _
                    ByVal POD_PO_LINE As Long,  _
                    ByVal POM_PO_NO As String,  _
                    ByVal POM_B_COY_ID As String,  _
                    ByVal POM_S_COY_ID As String,  _
                    ByVal POM_S_COY_NAME As String,  _
                    ByVal POM_PO_DATE As Date,  _
                    ByVal POM_PAYMENT_METHOD As String,  _
                    ByVal POD_ETD As Integer,  _
                    ByVal ID_INVOICE_NO As String,  _
                    ByVal ID_S_COY_ID As String,  _
                    ByVal ID_PO_LINE As Integer,  _
                    ByVal IM_INVOICE_NO As String,  _
                    ByVal IM_S_COY_ID As String,  _
                    ByVal IM_S_COY_NAME As String,  _
                    ByVal IM_PO_INDEX As Long,  _
                    ByVal IM_B_COY_ID As String,  _
                    ByVal IM_PAYMENT_DATE As Date,  _
                    ByVal IM_INVOICE_STATUS As Integer,  _
                    ByVal IM_INVOICE_TOTAL As Decimal,  _
                    ByVal IM_CURRENCY_CODE As String,  _
                    ByVal IM_CREATED_ON As Date,  _
                    ByVal POM_CREATED_DATE As Date,  _
                    ByVal STATUS_DESC As String,  _
                    ByVal POM_CURRENCY_CODE As String,  _
                    ByVal INVOICE_AMT As String) As DataSetOverdueInvRow
            Dim rowDataSetOverdueInvRow As DataSetOverdueInvRow = CType(Me.NewRow,DataSetOverdueInvRow)
            Dim columnValuesArray() As Object = New Object() {CM_COY_NAME, CM_COY_ID, POD_PO_NO, POD_COY_ID, POD_PO_LINE, POM_PO_NO, POM_B_COY_ID, POM_S_COY_ID, POM_S_COY_NAME, POM_PO_DATE, POM_PAYMENT_METHOD, POD_ETD, ID_INVOICE_NO, ID_S_COY_ID, ID_PO_LINE, IM_INVOICE_NO, IM_S_COY_ID, IM_S_COY_NAME, Nothing, IM_PO_INDEX, IM_B_COY_ID, IM_PAYMENT_DATE, IM_INVOICE_STATUS, IM_INVOICE_TOTAL, IM_CURRENCY_CODE, IM_CREATED_ON, POM_CREATED_DATE, STATUS_DESC, POM_CURRENCY_CODE, INVOICE_AMT}
            rowDataSetOverdueInvRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataSetOverdueInvRow)
            Return rowDataSetOverdueInvRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataSetOverdueInvDataTable = CType(MyBase.Clone,DataSetOverdueInvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataSetOverdueInvDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCM_COY_NAME = MyBase.Columns("CM_COY_NAME")
            Me.columnCM_COY_ID = MyBase.Columns("CM_COY_ID")
            Me.columnPOD_PO_NO = MyBase.Columns("POD_PO_NO")
            Me.columnPOD_COY_ID = MyBase.Columns("POD_COY_ID")
            Me.columnPOD_PO_LINE = MyBase.Columns("POD_PO_LINE")
            Me.columnPOM_PO_NO = MyBase.Columns("POM_PO_NO")
            Me.columnPOM_B_COY_ID = MyBase.Columns("POM_B_COY_ID")
            Me.columnPOM_S_COY_ID = MyBase.Columns("POM_S_COY_ID")
            Me.columnPOM_S_COY_NAME = MyBase.Columns("POM_S_COY_NAME")
            Me.columnPOM_PO_DATE = MyBase.Columns("POM_PO_DATE")
            Me.columnPOM_PAYMENT_METHOD = MyBase.Columns("POM_PAYMENT_METHOD")
            Me.columnPOD_ETD = MyBase.Columns("POD_ETD")
            Me.columnID_INVOICE_NO = MyBase.Columns("ID_INVOICE_NO")
            Me.columnID_S_COY_ID = MyBase.Columns("ID_S_COY_ID")
            Me.columnID_PO_LINE = MyBase.Columns("ID_PO_LINE")
            Me.columnIM_INVOICE_NO = MyBase.Columns("IM_INVOICE_NO")
            Me.columnIM_S_COY_ID = MyBase.Columns("IM_S_COY_ID")
            Me.columnIM_S_COY_NAME = MyBase.Columns("IM_S_COY_NAME")
            Me.columnPOM_PO_INDEX = MyBase.Columns("POM_PO_INDEX")
            Me.columnIM_PO_INDEX = MyBase.Columns("IM_PO_INDEX")
            Me.columnIM_B_COY_ID = MyBase.Columns("IM_B_COY_ID")
            Me.columnIM_PAYMENT_DATE = MyBase.Columns("IM_PAYMENT_DATE")
            Me.columnIM_INVOICE_STATUS = MyBase.Columns("IM_INVOICE_STATUS")
            Me.columnIM_INVOICE_TOTAL = MyBase.Columns("IM_INVOICE_TOTAL")
            Me.columnIM_CURRENCY_CODE = MyBase.Columns("IM_CURRENCY_CODE")
            Me.columnIM_CREATED_ON = MyBase.Columns("IM_CREATED_ON")
            Me.columnPOM_CREATED_DATE = MyBase.Columns("POM_CREATED_DATE")
            Me.columnSTATUS_DESC = MyBase.Columns("STATUS_DESC")
            Me.columnPOM_CURRENCY_CODE = MyBase.Columns("POM_CURRENCY_CODE")
            Me.columnINVOICE_AMT = MyBase.Columns("INVOICE_AMT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCM_COY_NAME = New Global.System.Data.DataColumn("CM_COY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCM_COY_NAME)
            Me.columnCM_COY_ID = New Global.System.Data.DataColumn("CM_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCM_COY_ID)
            Me.columnPOD_PO_NO = New Global.System.Data.DataColumn("POD_PO_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_PO_NO)
            Me.columnPOD_COY_ID = New Global.System.Data.DataColumn("POD_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_COY_ID)
            Me.columnPOD_PO_LINE = New Global.System.Data.DataColumn("POD_PO_LINE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_PO_LINE)
            Me.columnPOM_PO_NO = New Global.System.Data.DataColumn("POM_PO_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_PO_NO)
            Me.columnPOM_B_COY_ID = New Global.System.Data.DataColumn("POM_B_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_B_COY_ID)
            Me.columnPOM_S_COY_ID = New Global.System.Data.DataColumn("POM_S_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_S_COY_ID)
            Me.columnPOM_S_COY_NAME = New Global.System.Data.DataColumn("POM_S_COY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_S_COY_NAME)
            Me.columnPOM_PO_DATE = New Global.System.Data.DataColumn("POM_PO_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_PO_DATE)
            Me.columnPOM_PAYMENT_METHOD = New Global.System.Data.DataColumn("POM_PAYMENT_METHOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_PAYMENT_METHOD)
            Me.columnPOD_ETD = New Global.System.Data.DataColumn("POD_ETD", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_ETD)
            Me.columnID_INVOICE_NO = New Global.System.Data.DataColumn("ID_INVOICE_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_INVOICE_NO)
            Me.columnID_S_COY_ID = New Global.System.Data.DataColumn("ID_S_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_S_COY_ID)
            Me.columnID_PO_LINE = New Global.System.Data.DataColumn("ID_PO_LINE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PO_LINE)
            Me.columnIM_INVOICE_NO = New Global.System.Data.DataColumn("IM_INVOICE_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_NO)
            Me.columnIM_S_COY_ID = New Global.System.Data.DataColumn("IM_S_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_S_COY_ID)
            Me.columnIM_S_COY_NAME = New Global.System.Data.DataColumn("IM_S_COY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_S_COY_NAME)
            Me.columnPOM_PO_INDEX = New Global.System.Data.DataColumn("POM_PO_INDEX", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_PO_INDEX)
            Me.columnIM_PO_INDEX = New Global.System.Data.DataColumn("IM_PO_INDEX", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_PO_INDEX)
            Me.columnIM_B_COY_ID = New Global.System.Data.DataColumn("IM_B_COY_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_B_COY_ID)
            Me.columnIM_PAYMENT_DATE = New Global.System.Data.DataColumn("IM_PAYMENT_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_PAYMENT_DATE)
            Me.columnIM_INVOICE_STATUS = New Global.System.Data.DataColumn("IM_INVOICE_STATUS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_STATUS)
            Me.columnIM_INVOICE_TOTAL = New Global.System.Data.DataColumn("IM_INVOICE_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_TOTAL)
            Me.columnIM_CURRENCY_CODE = New Global.System.Data.DataColumn("IM_CURRENCY_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_CURRENCY_CODE)
            Me.columnIM_CREATED_ON = New Global.System.Data.DataColumn("IM_CREATED_ON", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_CREATED_ON)
            Me.columnPOM_CREATED_DATE = New Global.System.Data.DataColumn("POM_CREATED_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_CREATED_DATE)
            Me.columnSTATUS_DESC = New Global.System.Data.DataColumn("STATUS_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_DESC)
            Me.columnPOM_CURRENCY_CODE = New Global.System.Data.DataColumn("POM_CURRENCY_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_CURRENCY_CODE)
            Me.columnINVOICE_AMT = New Global.System.Data.DataColumn("INVOICE_AMT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_AMT)
            Me.columnCM_COY_NAME.MaxLength = 100
            Me.columnCM_COY_ID.MaxLength = 20
            Me.columnPOD_PO_NO.MaxLength = 50
            Me.columnPOD_COY_ID.MaxLength = 20
            Me.columnPOM_PO_NO.AllowDBNull = false
            Me.columnPOM_PO_NO.MaxLength = 50
            Me.columnPOM_B_COY_ID.AllowDBNull = false
            Me.columnPOM_B_COY_ID.MaxLength = 20
            Me.columnPOM_S_COY_ID.MaxLength = 20
            Me.columnPOM_S_COY_NAME.MaxLength = 100
            Me.columnPOM_PAYMENT_METHOD.MaxLength = 30
            Me.columnID_INVOICE_NO.AllowDBNull = false
            Me.columnID_INVOICE_NO.MaxLength = 50
            Me.columnID_S_COY_ID.AllowDBNull = false
            Me.columnID_S_COY_ID.MaxLength = 20
            Me.columnIM_INVOICE_NO.MaxLength = 50
            Me.columnIM_S_COY_ID.MaxLength = 20
            Me.columnIM_S_COY_NAME.MaxLength = 100
            Me.columnPOM_PO_INDEX.AutoIncrement = true
            Me.columnPOM_PO_INDEX.AllowDBNull = false
            Me.columnIM_B_COY_ID.MaxLength = 20
            Me.columnIM_CURRENCY_CODE.MaxLength = 10
            Me.columnSTATUS_DESC.MaxLength = 50
            Me.columnPOM_CURRENCY_CODE.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataSetOverdueInvRow() As DataSetOverdueInvRow
            Return CType(Me.NewRow,DataSetOverdueInvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataSetOverdueInvRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataSetOverdueInvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataSetOverdueInvRowChangedEvent) Is Nothing) Then
                RaiseEvent DataSetOverdueInvRowChanged(Me, New DataSetOverdueInvRowChangeEvent(CType(e.Row,DataSetOverdueInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataSetOverdueInvRowChangingEvent) Is Nothing) Then
                RaiseEvent DataSetOverdueInvRowChanging(Me, New DataSetOverdueInvRowChangeEvent(CType(e.Row,DataSetOverdueInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataSetOverdueInvRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataSetOverdueInvRowDeleted(Me, New DataSetOverdueInvRowChangeEvent(CType(e.Row,DataSetOverdueInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataSetOverdueInvRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataSetOverdueInvRowDeleting(Me, New DataSetOverdueInvRowChangeEvent(CType(e.Row,DataSetOverdueInvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataSetOverdueInvRow(ByVal row As DataSetOverdueInvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As OverdueInv = New OverdueInv
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataSetOverdueInvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataSetOverdueInvRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataSetOverdueInv As DataSetOverdueInvDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataSetOverdueInv = CType(Me.Table,DataSetOverdueInvDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CM_COY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.CM_COY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CM_COY_NAME' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.CM_COY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CM_COY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.CM_COY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CM_COY_ID' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.CM_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_PO_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POD_PO_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POD_PO_NO' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POD_PO_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_COY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POD_COY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POD_COY_ID' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POD_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_PO_LINE() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POD_PO_LINEColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POD_PO_LINE' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POD_PO_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_PO_NO() As String
            Get
                Return CType(Me(Me.tableDataSetOverdueInv.POM_PO_NOColumn),String)
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_PO_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_B_COY_ID() As String
            Get
                Return CType(Me(Me.tableDataSetOverdueInv.POM_B_COY_IDColumn),String)
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_B_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_S_COY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POM_S_COY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POM_S_COY_ID' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_S_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_S_COY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POM_S_COY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POM_S_COY_NAME' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_S_COY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_PO_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POM_PO_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POM_PO_DATE' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_PO_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_PAYMENT_METHOD() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POM_PAYMENT_METHODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POM_PAYMENT_METHOD' in table 'DataSetOverdueInv' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_PAYMENT_METHODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_ETD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POD_ETDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POD_ETD' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POD_ETDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_INVOICE_NO() As String
            Get
                Return CType(Me(Me.tableDataSetOverdueInv.ID_INVOICE_NOColumn),String)
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.ID_INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_S_COY_ID() As String
            Get
                Return CType(Me(Me.tableDataSetOverdueInv.ID_S_COY_IDColumn),String)
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.ID_S_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_PO_LINE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.ID_PO_LINEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_PO_LINE' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.ID_PO_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_INVOICE_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_NO' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_S_COY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_S_COY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_S_COY_ID' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_S_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_S_COY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_S_COY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_S_COY_NAME' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_S_COY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_PO_INDEX() As Long
            Get
                Return CType(Me(Me.tableDataSetOverdueInv.POM_PO_INDEXColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_PO_INDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PO_INDEX() As Long
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_PO_INDEXColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_PO_INDEX' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_PO_INDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_B_COY_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_B_COY_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_B_COY_ID' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_B_COY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PAYMENT_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_PAYMENT_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_PAYMENT_DATE' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_PAYMENT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_STATUS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_INVOICE_STATUSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_STATUS' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_INVOICE_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_INVOICE_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_TOTAL' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_INVOICE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CURRENCY_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_CURRENCY_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_CURRENCY_CODE' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_CURRENCY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CREATED_ON() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.IM_CREATED_ONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_CREATED_ON' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.IM_CREATED_ONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_CREATED_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POM_CREATED_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POM_CREATED_DATE' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_CREATED_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.STATUS_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS_DESC' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.STATUS_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_CURRENCY_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.POM_CURRENCY_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POM_CURRENCY_CODE' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.POM_CURRENCY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_AMT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverdueInv.INVOICE_AMTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_AMT' in table 'DataSetOverdueInv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverdueInv.INVOICE_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCM_COY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.CM_COY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCM_COY_NAMENull()
            Me(Me.tableDataSetOverdueInv.CM_COY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCM_COY_IDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.CM_COY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCM_COY_IDNull()
            Me(Me.tableDataSetOverdueInv.CM_COY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOD_PO_NONull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POD_PO_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOD_PO_NONull()
            Me(Me.tableDataSetOverdueInv.POD_PO_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOD_COY_IDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POD_COY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOD_COY_IDNull()
            Me(Me.tableDataSetOverdueInv.POD_COY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOD_PO_LINENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POD_PO_LINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOD_PO_LINENull()
            Me(Me.tableDataSetOverdueInv.POD_PO_LINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_S_COY_IDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POM_S_COY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_S_COY_IDNull()
            Me(Me.tableDataSetOverdueInv.POM_S_COY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_S_COY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POM_S_COY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_S_COY_NAMENull()
            Me(Me.tableDataSetOverdueInv.POM_S_COY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_PO_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POM_PO_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_PO_DATENull()
            Me(Me.tableDataSetOverdueInv.POM_PO_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_PAYMENT_METHODNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POM_PAYMENT_METHODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_PAYMENT_METHODNull()
            Me(Me.tableDataSetOverdueInv.POM_PAYMENT_METHODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOD_ETDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POD_ETDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOD_ETDNull()
            Me(Me.tableDataSetOverdueInv.POD_ETDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_PO_LINENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.ID_PO_LINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_PO_LINENull()
            Me(Me.tableDataSetOverdueInv.ID_PO_LINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_NONull()
            Me(Me.tableDataSetOverdueInv.IM_INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_S_COY_IDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_S_COY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_S_COY_IDNull()
            Me(Me.tableDataSetOverdueInv.IM_S_COY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_S_COY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_S_COY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_S_COY_NAMENull()
            Me(Me.tableDataSetOverdueInv.IM_S_COY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_PO_INDEXNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_PO_INDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_PO_INDEXNull()
            Me(Me.tableDataSetOverdueInv.IM_PO_INDEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_B_COY_IDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_B_COY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_B_COY_IDNull()
            Me(Me.tableDataSetOverdueInv.IM_B_COY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_PAYMENT_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_PAYMENT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_PAYMENT_DATENull()
            Me(Me.tableDataSetOverdueInv.IM_PAYMENT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_INVOICE_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_STATUSNull()
            Me(Me.tableDataSetOverdueInv.IM_INVOICE_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_INVOICE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_TOTALNull()
            Me(Me.tableDataSetOverdueInv.IM_INVOICE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_CURRENCY_CODENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_CURRENCY_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_CURRENCY_CODENull()
            Me(Me.tableDataSetOverdueInv.IM_CURRENCY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_CREATED_ONNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.IM_CREATED_ONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_CREATED_ONNull()
            Me(Me.tableDataSetOverdueInv.IM_CREATED_ONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_CREATED_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POM_CREATED_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_CREATED_DATENull()
            Me(Me.tableDataSetOverdueInv.POM_CREATED_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_DESCNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.STATUS_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_DESCNull()
            Me(Me.tableDataSetOverdueInv.STATUS_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_CURRENCY_CODENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.POM_CURRENCY_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_CURRENCY_CODENull()
            Me(Me.tableDataSetOverdueInv.POM_CURRENCY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_AMTNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverdueInv.INVOICE_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_AMTNull()
            Me(Me.tableDataSetOverdueInv.INVOICE_AMTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataSetOverdueInvRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataSetOverdueInvRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataSetOverdueInvRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataSetOverdueInvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace OverdueInvTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataSetOverdueInvTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataSetOverdueInv"
            tableMapping.ColumnMappings.Add("CM_COY_NAME", "CM_COY_NAME")
            tableMapping.ColumnMappings.Add("CM_COY_ID", "CM_COY_ID")
            tableMapping.ColumnMappings.Add("POD_PO_NO", "POD_PO_NO")
            tableMapping.ColumnMappings.Add("POD_COY_ID", "POD_COY_ID")
            tableMapping.ColumnMappings.Add("POD_PO_LINE", "POD_PO_LINE")
            tableMapping.ColumnMappings.Add("POM_PO_NO", "POM_PO_NO")
            tableMapping.ColumnMappings.Add("POM_B_COY_ID", "POM_B_COY_ID")
            tableMapping.ColumnMappings.Add("POM_S_COY_ID", "POM_S_COY_ID")
            tableMapping.ColumnMappings.Add("POM_S_COY_NAME", "POM_S_COY_NAME")
            tableMapping.ColumnMappings.Add("POM_PO_DATE", "POM_PO_DATE")
            tableMapping.ColumnMappings.Add("POM_PAYMENT_METHOD", "POM_PAYMENT_METHOD")
            tableMapping.ColumnMappings.Add("POD_ETD", "POD_ETD")
            tableMapping.ColumnMappings.Add("ID_INVOICE_NO", "ID_INVOICE_NO")
            tableMapping.ColumnMappings.Add("ID_S_COY_ID", "ID_S_COY_ID")
            tableMapping.ColumnMappings.Add("ID_PO_LINE", "ID_PO_LINE")
            tableMapping.ColumnMappings.Add("IM_INVOICE_NO", "IM_INVOICE_NO")
            tableMapping.ColumnMappings.Add("IM_S_COY_ID", "IM_S_COY_ID")
            tableMapping.ColumnMappings.Add("IM_S_COY_NAME", "IM_S_COY_NAME")
            tableMapping.ColumnMappings.Add("POM_PO_INDEX", "POM_PO_INDEX")
            tableMapping.ColumnMappings.Add("IM_PO_INDEX", "IM_PO_INDEX")
            tableMapping.ColumnMappings.Add("IM_B_COY_ID", "IM_B_COY_ID")
            tableMapping.ColumnMappings.Add("IM_PAYMENT_DATE", "IM_PAYMENT_DATE")
            tableMapping.ColumnMappings.Add("IM_INVOICE_STATUS", "IM_INVOICE_STATUS")
            tableMapping.ColumnMappings.Add("IM_INVOICE_TOTAL", "IM_INVOICE_TOTAL")
            tableMapping.ColumnMappings.Add("IM_CURRENCY_CODE", "IM_CURRENCY_CODE")
            tableMapping.ColumnMappings.Add("IM_CREATED_ON", "IM_CREATED_ON")
            tableMapping.ColumnMappings.Add("POM_CREATED_DATE", "POM_CREATED_DATE")
            tableMapping.ColumnMappings.Add("STATUS_DESC", "STATUS_DESC")
            tableMapping.ColumnMappings.Add("POM_CURRENCY_CODE", "POM_CURRENCY_CODE")
            tableMapping.ColumnMappings.Add("INVOICE_AMT", "INVOICE_AMT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString2").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     company_mstr.CM_COY_NAME, company_mstr.CM_COY_ID, po_details.POD_PO_NO"& _ 
                ", po_details.POD_COY_ID, po_details.POD_PO_LINE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      po_mstr"& _ 
                ".POM_PO_NO, po_mstr.POM_B_COY_ID, po_mstr.POM_S_COY_ID, po_mstr.POM_S_COY_NAME, "& _ 
                "po_mstr.POM_PO_DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      po_mstr.POM_PAYMENT_METHOD, po_deta"& _ 
                "ils.POD_ETD, invoice_details.ID_INVOICE_NO, invoice_details.ID_S_COY_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 invoice_details.ID_PO_LINE, invoice_mstr.IM_INVOICE_NO, invoice"& _ 
                "_mstr.IM_S_COY_ID, invoice_mstr.IM_S_COY_NAME, invoice_mstr.IM_CREATED_ON, po_ms"& _ 
                "tr.POM_PO_INDEX, po_mstr.POM_CREATED_DATE, invoice_mstr.IM_PO_INDEX, invoice_mst"& _ 
                "r.IM_B_COY_ID, invoice_mstr.IM_PAYMENT_DATE, invoice_mstr.IM_INVOICE_STATUS, NUL"& _ 
                "L AS INVOICE_AMT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      invoice_mstr.IM_INVOICE_TOTAL, invoice_"& _ 
                "mstr.IM_CURRENCY_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         invoice_details INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      invoice_mstr ON invoice_details.ID_INVOICE_NO = invoice_mstr.IM_INVOICE_NO"& _ 
                " INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      po_mstr ON invoice_mstr.IM_PO_INDEX = po_mstr"& _ 
                ".POM_PO_INDEX LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      po_details ON po_details.PO"& _ 
                "D_PO_LINE = invoice_details.ID_PO_LINE LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      co"& _ 
                "mpany_mstr ON invoice_mstr.IM_B_COY_ID = company_mstr.CM_COY_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OverdueInv.DataSetOverdueInvDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OverdueInv.DataSetOverdueInvDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OverdueInv.DataSetOverdueInvDataTable = New OverdueInv.DataSetOverdueInvDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
