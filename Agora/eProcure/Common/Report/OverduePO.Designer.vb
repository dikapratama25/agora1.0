'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("OverduePO"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class OverduePO
    Inherits System.Data.DataSet
    
    Private tableDataSetOverduePO As DataSetOverduePODataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataSetOverduePO")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetOverduePODataTable(ds.Tables("DataSetOverduePO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataSetOverduePO() As DataSetOverduePODataTable
        Get
            Return Me.tableDataSetOverduePO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As OverduePO = CType(MyBase.Clone,OverduePO)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataSetOverduePO")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetOverduePODataTable(ds.Tables("DataSetOverduePO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataSetOverduePO = CType(MyBase.Tables("DataSetOverduePO"),DataSetOverduePODataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataSetOverduePO) Is Nothing) Then
                Me.tableDataSetOverduePO.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "OverduePO"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/OverduePO.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataSetOverduePO = New DataSetOverduePODataTable
        MyBase.Tables.Add(Me.tableDataSetOverduePO)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataSetOverduePO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As OverduePO = New OverduePO
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub DataSetOverduePORowChangeEventHandler(ByVal sender As Object, ByVal e As DataSetOverduePORowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataSetOverduePODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPOD_PO_NO As System.Data.DataColumn
        
        Private columnPOM_CREATED_DATE As System.Data.DataColumn
        
        Private columnPOM_PO_DATE As System.Data.DataColumn
        
        Private columnPOD_ETD As System.Data.DataColumn
        
        Private columnPOM_S_COY_NAME As System.Data.DataColumn
        
        Private columnPOD_VENDOR_ITEM_CODE As System.Data.DataColumn
        
        Private columnPOD_PRODUCT_DESC As System.Data.DataColumn
        
        Private columnPOQty As System.Data.DataColumn
        
        Private columnDOQty As System.Data.DataColumn
        
        Private columnGRNQty As System.Data.DataColumn
        
        Private columnPOD_REJECTED_QTY As System.Data.DataColumn
        
        Private columnPOD_ORDERED_QTY As System.Data.DataColumn
        
        Private columnPOD_DELIVERED_QTY As System.Data.DataColumn
        
        Private columnPOD_CANCELLED_QTY As System.Data.DataColumn
        
        Private columnCM_COY_NAME As System.Data.DataColumn
        
        Private columnPOM_BUYER_ID As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataSetOverduePO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_PO_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_PO_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_CREATED_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOM_CREATED_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_PO_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOM_PO_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_ETDColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_ETD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_S_COY_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOM_S_COY_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_VENDOR_ITEM_CODEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_VENDOR_ITEM_CODE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_PRODUCT_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_PRODUCT_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POQtyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOQty
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOQtyColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOQty
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRNQtyColumn() As System.Data.DataColumn
            Get
                Return Me.columnGRNQty
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_REJECTED_QTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_REJECTED_QTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_ORDERED_QTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_ORDERED_QTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_DELIVERED_QTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_DELIVERED_QTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POD_CANCELLED_QTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOD_CANCELLED_QTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CM_COY_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCM_COY_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POM_BUYER_IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOM_BUYER_ID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataSetOverduePORow
            Get
                Return CType(Me.Rows(index),DataSetOverduePORow)
            End Get
        End Property
        
        Public Event DataSetOverduePORowChanging As DataSetOverduePORowChangeEventHandler
        
        Public Event DataSetOverduePORowChanged As DataSetOverduePORowChangeEventHandler
        
        Public Event DataSetOverduePORowDeleting As DataSetOverduePORowChangeEventHandler
        
        Public Event DataSetOverduePORowDeleted As DataSetOverduePORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataSetOverduePORow(ByVal row As DataSetOverduePORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataSetOverduePORow( _
                    ByVal POD_PO_NO As String,  _
                    ByVal POM_CREATED_DATE As Date,  _
                    ByVal POM_PO_DATE As Date,  _
                    ByVal POD_ETD As Integer,  _
                    ByVal POM_S_COY_NAME As String,  _
                    ByVal POD_VENDOR_ITEM_CODE As String,  _
                    ByVal POD_PRODUCT_DESC As String,  _
                    ByVal POQty As Long,  _
                    ByVal DOQty As Decimal,  _
                    ByVal GRNQty As Decimal,  _
                    ByVal POD_REJECTED_QTY As Integer,  _
                    ByVal POD_ORDERED_QTY As Long,  _
                    ByVal POD_DELIVERED_QTY As Integer,  _
                    ByVal POD_CANCELLED_QTY As Integer,  _
                    ByVal CM_COY_NAME As String,  _
                    ByVal POM_BUYER_ID As String) As DataSetOverduePORow
            Dim rowDataSetOverduePORow As DataSetOverduePORow = CType(Me.NewRow,DataSetOverduePORow)
            rowDataSetOverduePORow.ItemArray = New Object() {POD_PO_NO, POM_CREATED_DATE, POM_PO_DATE, POD_ETD, POM_S_COY_NAME, POD_VENDOR_ITEM_CODE, POD_PRODUCT_DESC, POQty, DOQty, GRNQty, POD_REJECTED_QTY, POD_ORDERED_QTY, POD_DELIVERED_QTY, POD_CANCELLED_QTY, CM_COY_NAME, POM_BUYER_ID}
            Me.Rows.Add(rowDataSetOverduePORow)
            Return rowDataSetOverduePORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPOD_PO_NO(ByVal POD_PO_NO As String) As DataSetOverduePORow
            Return CType(Me.Rows.Find(New Object() {POD_PO_NO}),DataSetOverduePORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DataSetOverduePODataTable = CType(MyBase.Clone,DataSetOverduePODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DataSetOverduePODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPOD_PO_NO = MyBase.Columns("POD_PO_NO")
            Me.columnPOM_CREATED_DATE = MyBase.Columns("POM_CREATED_DATE")
            Me.columnPOM_PO_DATE = MyBase.Columns("POM_PO_DATE")
            Me.columnPOD_ETD = MyBase.Columns("POD_ETD")
            Me.columnPOM_S_COY_NAME = MyBase.Columns("POM_S_COY_NAME")
            Me.columnPOD_VENDOR_ITEM_CODE = MyBase.Columns("POD_VENDOR_ITEM_CODE")
            Me.columnPOD_PRODUCT_DESC = MyBase.Columns("POD_PRODUCT_DESC")
            Me.columnPOQty = MyBase.Columns("POQty")
            Me.columnDOQty = MyBase.Columns("DOQty")
            Me.columnGRNQty = MyBase.Columns("GRNQty")
            Me.columnPOD_REJECTED_QTY = MyBase.Columns("POD_REJECTED_QTY")
            Me.columnPOD_ORDERED_QTY = MyBase.Columns("POD_ORDERED_QTY")
            Me.columnPOD_DELIVERED_QTY = MyBase.Columns("POD_DELIVERED_QTY")
            Me.columnPOD_CANCELLED_QTY = MyBase.Columns("POD_CANCELLED_QTY")
            Me.columnCM_COY_NAME = MyBase.Columns("CM_COY_NAME")
            Me.columnPOM_BUYER_ID = MyBase.Columns("POM_BUYER_ID")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPOD_PO_NO = New System.Data.DataColumn("POD_PO_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_PO_NO)
            Me.columnPOM_CREATED_DATE = New System.Data.DataColumn("POM_CREATED_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_CREATED_DATE)
            Me.columnPOM_PO_DATE = New System.Data.DataColumn("POM_PO_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_PO_DATE)
            Me.columnPOD_ETD = New System.Data.DataColumn("POD_ETD", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_ETD)
            Me.columnPOM_S_COY_NAME = New System.Data.DataColumn("POM_S_COY_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_S_COY_NAME)
            Me.columnPOD_VENDOR_ITEM_CODE = New System.Data.DataColumn("POD_VENDOR_ITEM_CODE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_VENDOR_ITEM_CODE)
            Me.columnPOD_PRODUCT_DESC = New System.Data.DataColumn("POD_PRODUCT_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_PRODUCT_DESC)
            Me.columnPOQty = New System.Data.DataColumn("POQty", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOQty)
            Me.columnDOQty = New System.Data.DataColumn("DOQty", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOQty)
            Me.columnGRNQty = New System.Data.DataColumn("GRNQty", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRNQty)
            Me.columnPOD_REJECTED_QTY = New System.Data.DataColumn("POD_REJECTED_QTY", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_REJECTED_QTY)
            Me.columnPOD_ORDERED_QTY = New System.Data.DataColumn("POD_ORDERED_QTY", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_ORDERED_QTY)
            Me.columnPOD_DELIVERED_QTY = New System.Data.DataColumn("POD_DELIVERED_QTY", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_DELIVERED_QTY)
            Me.columnPOD_CANCELLED_QTY = New System.Data.DataColumn("POD_CANCELLED_QTY", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD_CANCELLED_QTY)
            Me.columnCM_COY_NAME = New System.Data.DataColumn("CM_COY_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCM_COY_NAME)
            Me.columnPOM_BUYER_ID = New System.Data.DataColumn("POM_BUYER_ID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOM_BUYER_ID)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPOD_PO_NO}, true))
            Me.columnPOD_PO_NO.AllowDBNull = false
            Me.columnPOD_PO_NO.Unique = true
            Me.columnPOD_PO_NO.MaxLength = 50
            Me.columnPOM_S_COY_NAME.MaxLength = 100
            Me.columnPOD_VENDOR_ITEM_CODE.MaxLength = 100
            Me.columnPOD_PRODUCT_DESC.MaxLength = 500
            Me.columnPOQty.AllowDBNull = false
            Me.columnPOD_REJECTED_QTY.AllowDBNull = false
            Me.columnPOD_ORDERED_QTY.AllowDBNull = false
            Me.columnPOD_DELIVERED_QTY.AllowDBNull = false
            Me.columnPOD_CANCELLED_QTY.AllowDBNull = false
            Me.columnCM_COY_NAME.AllowDBNull = false
            Me.columnCM_COY_NAME.MaxLength = 100
            Me.columnPOM_BUYER_ID.MaxLength = 20
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataSetOverduePORow() As DataSetOverduePORow
            Return CType(Me.NewRow,DataSetOverduePORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DataSetOverduePORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DataSetOverduePORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataSetOverduePORowChangedEvent) Is Nothing) Then
                RaiseEvent DataSetOverduePORowChanged(Me, New DataSetOverduePORowChangeEvent(CType(e.Row,DataSetOverduePORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataSetOverduePORowChangingEvent) Is Nothing) Then
                RaiseEvent DataSetOverduePORowChanging(Me, New DataSetOverduePORowChangeEvent(CType(e.Row,DataSetOverduePORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataSetOverduePORowDeletedEvent) Is Nothing) Then
                RaiseEvent DataSetOverduePORowDeleted(Me, New DataSetOverduePORowChangeEvent(CType(e.Row,DataSetOverduePORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataSetOverduePORowDeletingEvent) Is Nothing) Then
                RaiseEvent DataSetOverduePORowDeleting(Me, New DataSetOverduePORowChangeEvent(CType(e.Row,DataSetOverduePORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataSetOverduePORow(ByVal row As DataSetOverduePORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As OverduePO = New OverduePO
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataSetOverduePODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataSetOverduePORow
        Inherits System.Data.DataRow
        
        Private tableDataSetOverduePO As DataSetOverduePODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataSetOverduePO = CType(Me.Table,DataSetOverduePODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_PO_NO() As String
            Get
                Return CType(Me(Me.tableDataSetOverduePO.POD_PO_NOColumn),String)
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_PO_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_CREATED_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.POM_CREATED_DATEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'POM_CREATED_DATE' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POM_CREATED_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_PO_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.POM_PO_DATEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'POM_PO_DATE' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POM_PO_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_ETD() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.POD_ETDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'POD_ETD' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_ETDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_S_COY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.POM_S_COY_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'POM_S_COY_NAME' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POM_S_COY_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_VENDOR_ITEM_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.POD_VENDOR_ITEM_CODEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'POD_VENDOR_ITEM_CODE' in table 'DataSetOverduePO' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_VENDOR_ITEM_CODEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_PRODUCT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.POD_PRODUCT_DESCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'POD_PRODUCT_DESC' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_PRODUCT_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POQty() As Long
            Get
                Return CType(Me(Me.tableDataSetOverduePO.POQtyColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POQtyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.DOQtyColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DOQty' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.DOQtyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRNQty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.GRNQtyColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GRNQty' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.GRNQtyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_REJECTED_QTY() As Integer
            Get
                Return CType(Me(Me.tableDataSetOverduePO.POD_REJECTED_QTYColumn),Integer)
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_REJECTED_QTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_ORDERED_QTY() As Long
            Get
                Return CType(Me(Me.tableDataSetOverduePO.POD_ORDERED_QTYColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_ORDERED_QTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_DELIVERED_QTY() As Integer
            Get
                Return CType(Me(Me.tableDataSetOverduePO.POD_DELIVERED_QTYColumn),Integer)
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_DELIVERED_QTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD_CANCELLED_QTY() As Integer
            Get
                Return CType(Me(Me.tableDataSetOverduePO.POD_CANCELLED_QTYColumn),Integer)
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POD_CANCELLED_QTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CM_COY_NAME() As String
            Get
                Return CType(Me(Me.tableDataSetOverduePO.CM_COY_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetOverduePO.CM_COY_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POM_BUYER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetOverduePO.POM_BUYER_IDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'POM_BUYER_ID' in table 'DataSetOverduePO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetOverduePO.POM_BUYER_IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_CREATED_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.POM_CREATED_DATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_CREATED_DATENull()
            Me(Me.tableDataSetOverduePO.POM_CREATED_DATEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_PO_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.POM_PO_DATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_PO_DATENull()
            Me(Me.tableDataSetOverduePO.POM_PO_DATEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOD_ETDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.POD_ETDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOD_ETDNull()
            Me(Me.tableDataSetOverduePO.POD_ETDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_S_COY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.POM_S_COY_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_S_COY_NAMENull()
            Me(Me.tableDataSetOverduePO.POM_S_COY_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOD_VENDOR_ITEM_CODENull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.POD_VENDOR_ITEM_CODEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOD_VENDOR_ITEM_CODENull()
            Me(Me.tableDataSetOverduePO.POD_VENDOR_ITEM_CODEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOD_PRODUCT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.POD_PRODUCT_DESCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOD_PRODUCT_DESCNull()
            Me(Me.tableDataSetOverduePO.POD_PRODUCT_DESCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOQtyNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.DOQtyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOQtyNull()
            Me(Me.tableDataSetOverduePO.DOQtyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRNQtyNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.GRNQtyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRNQtyNull()
            Me(Me.tableDataSetOverduePO.GRNQtyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOM_BUYER_IDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetOverduePO.POM_BUYER_IDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOM_BUYER_IDNull()
            Me(Me.tableDataSetOverduePO.POM_BUYER_IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataSetOverduePORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DataSetOverduePORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataSetOverduePORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataSetOverduePORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace OverduePOTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataSetOverduePOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataSetOverduePO"
            tableMapping.ColumnMappings.Add("POD_PO_NO", "POD_PO_NO")
            tableMapping.ColumnMappings.Add("POM_CREATED_DATE", "POM_CREATED_DATE")
            tableMapping.ColumnMappings.Add("POM_PO_DATE", "POM_PO_DATE")
            tableMapping.ColumnMappings.Add("POD_ETD", "POD_ETD")
            tableMapping.ColumnMappings.Add("POM_S_COY_NAME", "POM_S_COY_NAME")
            tableMapping.ColumnMappings.Add("POD_VENDOR_ITEM_CODE", "POD_VENDOR_ITEM_CODE")
            tableMapping.ColumnMappings.Add("POD_PRODUCT_DESC", "POD_PRODUCT_DESC")
            tableMapping.ColumnMappings.Add("POQty", "POQty")
            tableMapping.ColumnMappings.Add("DOQty", "DOQty")
            tableMapping.ColumnMappings.Add("GRNQty", "GRNQty")
            tableMapping.ColumnMappings.Add("POD_REJECTED_QTY", "POD_REJECTED_QTY")
            tableMapping.ColumnMappings.Add("POD_ORDERED_QTY", "POD_ORDERED_QTY")
            tableMapping.ColumnMappings.Add("POD_DELIVERED_QTY", "POD_DELIVERED_QTY")
            tableMapping.ColumnMappings.Add("POD_CANCELLED_QTY", "POD_CANCELLED_QTY")
            tableMapping.ColumnMappings.Add("CM_COY_NAME", "CM_COY_NAME")
            tableMapping.ColumnMappings.Add("POM_BUYER_ID", "POM_BUYER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString").ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     po_details.POD_PO_NO, PM.POM_CREATED_DATE, PM.POM_PO_DATE, po_details."& _ 
                "POD_ETD, PM.POM_S_COY_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      po_details.POD_VENDOR_ITEM_C"& _ 
                "ODE, po_details.POD_PRODUCT_DESC, po_details.POD_ORDERED_QTY AS POQty, SUM(do_de"& _ 
                "tails.DOD_DO_QTY)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       AS DOQty, SUM(grn_details.GD_RECEIVED_"& _ 
                "QTY) AS GRNQty, po_details.POD_REJECTED_QTY, po_details.POD_ORDERED_QTY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 po_details.POD_DELIVERED_QTY, po_details.POD_CANCELLED_QTY, com"& _ 
                "pany_mstr.CM_COY_NAME, PM.POM_BUYER_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         po_mstr PM INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  company_mstr ON PM.POM_B_COY_ID = company_mstr.CM_COY_ID INNER"& _ 
                " JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      po_details ON po_details.POD_COY_ID = PM.POM_B_COY_"& _ 
                "ID AND po_details.POD_PO_NO = PM.POM_PO_NO LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "  do_mstr ON do_mstr.DOM_PO_INDEX = PM.POM_PO_INDEX LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           do_details ON do_mstr.DOM_DO_NO = do_details.DOD_DO_NO AND do_details"& _ 
                ".DOD_PO_LINE = po_details.POD_PO_LINE LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      grn"& _ 
                "_mstr ON grn_mstr.GM_DO_INDEX = do_mstr.DOM_DO_INDEX AND grn_mstr.GM_PO_INDEX = "& _ 
                "PM.POM_PO_INDEX LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      grn_details ON grn_detail"& _ 
                "s.GD_GRN_NO = grn_mstr.GM_GRN_NO AND grn_mstr.GM_B_COY_ID = grn_details.GD_B_COY"& _ 
                "_ID AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      grn_details.GD_PO_LINE = po_details.POD_PO_LINE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PM.POM_B_COY_ID = 'tanac') AND (PM.POM_PO_STATUS IN (1, 2, 3)) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (po_details.POD_ORDERED_QTY - po_details.POD_DELIVERED_QT"& _ 
                "Y - po_details.POD_CANCELLED_QTY > 0)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY PM.POM_PO_NO, po_details.POD_PO_"& _ 
                "LINE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As OverduePO.DataSetOverduePODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As OverduePO.DataSetOverduePODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As OverduePO.DataSetOverduePODataTable = New OverduePO.DataSetOverduePODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
