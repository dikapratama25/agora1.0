'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PaymentToNonResident"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PaymentToNonResident
    Inherits Global.System.Data.DataSet
    
    Private tableDataSetPaymentToNonResident As DataSetPaymentToNonResidentDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataSetPaymentToNonResident")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetPaymentToNonResidentDataTable(ds.Tables("DataSetPaymentToNonResident")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataSetPaymentToNonResident() As DataSetPaymentToNonResidentDataTable
        Get
            Return Me.tableDataSetPaymentToNonResident
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PaymentToNonResident = CType(MyBase.Clone,PaymentToNonResident)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataSetPaymentToNonResident")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetPaymentToNonResidentDataTable(ds.Tables("DataSetPaymentToNonResident")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataSetPaymentToNonResident = CType(MyBase.Tables("DataSetPaymentToNonResident"),DataSetPaymentToNonResidentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataSetPaymentToNonResident) Is Nothing) Then
                Me.tableDataSetPaymentToNonResident.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PaymentToNonResident"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PaymentToNonResident.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataSetPaymentToNonResident = New DataSetPaymentToNonResidentDataTable
        MyBase.Tables.Add(Me.tableDataSetPaymentToNonResident)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataSetPaymentToNonResident() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PaymentToNonResident = New PaymentToNonResident
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataSetPaymentToNonResidentRowChangeEventHandler(ByVal sender As Object, ByVal e As DataSetPaymentToNonResidentRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataSetPaymentToNonResidentDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIM_S_COY_NAME As Global.System.Data.DataColumn
        
        Private columnIC_COUNTRY As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_NO As Global.System.Data.DataColumn
        
        Private columnINVOICE_TOTAL As Global.System.Data.DataColumn
        
        Private columnIM_PAYMENT_DATE As Global.System.Data.DataColumn
        
        Private columnIM_CURRENCY_CODE As Global.System.Data.DataColumn
        
        Private columnIM_INVOICE_TOTAL As Global.System.Data.DataColumn
        
        Private columnID_B_GL_CODE As Global.System.Data.DataColumn
        
        Private columnIM_WITHHOLDING_OPT As Global.System.Data.DataColumn
        
        Private columnIM_WITHHOLDING_REMARKS As Global.System.Data.DataColumn
        
        Private columnIM_WITHHOLDING_TAX As Global.System.Data.DataColumn
        
        Private columnWHT_AMT As Global.System.Data.DataColumn
        
        Private columnIM_RECEIPT_NO As Global.System.Data.DataColumn
        
        Private columnIM_RECEIPT_DATE As Global.System.Data.DataColumn
        
        Private columnAMT_PAID As Global.System.Data.DataColumn
        
        Private columnWHT_BANK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataSetPaymentToNonResident"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_S_COY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_S_COY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_PAYMENT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_PAYMENT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_CURRENCY_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_CURRENCY_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVOICE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVOICE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_B_GL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_B_GL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_WITHHOLDING_OPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_WITHHOLDING_OPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_WITHHOLDING_REMARKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_WITHHOLDING_REMARKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_WITHHOLDING_TAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_WITHHOLDING_TAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WHT_AMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWHT_AMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_RECEIPT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_RECEIPT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_RECEIPT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_RECEIPT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMT_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMT_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WHT_BANKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWHT_BANK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataSetPaymentToNonResidentRow
            Get
                Return CType(Me.Rows(index),DataSetPaymentToNonResidentRow)
            End Get
        End Property
        
        Public Event DataSetPaymentToNonResidentRowChanging As DataSetPaymentToNonResidentRowChangeEventHandler
        
        Public Event DataSetPaymentToNonResidentRowChanged As DataSetPaymentToNonResidentRowChangeEventHandler
        
        Public Event DataSetPaymentToNonResidentRowDeleting As DataSetPaymentToNonResidentRowChangeEventHandler
        
        Public Event DataSetPaymentToNonResidentRowDeleted As DataSetPaymentToNonResidentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataSetPaymentToNonResidentRow(ByVal row As DataSetPaymentToNonResidentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataSetPaymentToNonResidentRow( _
                    ByVal IM_S_COY_NAME As String,  _
                    ByVal IC_COUNTRY As String,  _
                    ByVal IM_INVOICE_NO As String,  _
                    ByVal INVOICE_TOTAL As String,  _
                    ByVal IM_PAYMENT_DATE As String,  _
                    ByVal IM_CURRENCY_CODE As String,  _
                    ByVal IM_INVOICE_TOTAL As String,  _
                    ByVal ID_B_GL_CODE As String,  _
                    ByVal IM_WITHHOLDING_OPT As String,  _
                    ByVal IM_WITHHOLDING_REMARKS As String,  _
                    ByVal IM_WITHHOLDING_TAX As String,  _
                    ByVal WHT_AMT As String,  _
                    ByVal IM_RECEIPT_NO As String,  _
                    ByVal IM_RECEIPT_DATE As String,  _
                    ByVal AMT_PAID As String,  _
                    ByVal WHT_BANK As String) As DataSetPaymentToNonResidentRow
            Dim rowDataSetPaymentToNonResidentRow As DataSetPaymentToNonResidentRow = CType(Me.NewRow,DataSetPaymentToNonResidentRow)
            Dim columnValuesArray() As Object = New Object() {IM_S_COY_NAME, IC_COUNTRY, IM_INVOICE_NO, INVOICE_TOTAL, IM_PAYMENT_DATE, IM_CURRENCY_CODE, IM_INVOICE_TOTAL, ID_B_GL_CODE, IM_WITHHOLDING_OPT, IM_WITHHOLDING_REMARKS, IM_WITHHOLDING_TAX, WHT_AMT, IM_RECEIPT_NO, IM_RECEIPT_DATE, AMT_PAID, WHT_BANK}
            rowDataSetPaymentToNonResidentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataSetPaymentToNonResidentRow)
            Return rowDataSetPaymentToNonResidentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataSetPaymentToNonResidentDataTable = CType(MyBase.Clone,DataSetPaymentToNonResidentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataSetPaymentToNonResidentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIM_S_COY_NAME = MyBase.Columns("IM_S_COY_NAME")
            Me.columnIC_COUNTRY = MyBase.Columns("IC_COUNTRY")
            Me.columnIM_INVOICE_NO = MyBase.Columns("IM_INVOICE_NO")
            Me.columnINVOICE_TOTAL = MyBase.Columns("INVOICE_TOTAL")
            Me.columnIM_PAYMENT_DATE = MyBase.Columns("IM_PAYMENT_DATE")
            Me.columnIM_CURRENCY_CODE = MyBase.Columns("IM_CURRENCY_CODE")
            Me.columnIM_INVOICE_TOTAL = MyBase.Columns("IM_INVOICE_TOTAL")
            Me.columnID_B_GL_CODE = MyBase.Columns("ID_B_GL_CODE")
            Me.columnIM_WITHHOLDING_OPT = MyBase.Columns("IM_WITHHOLDING_OPT")
            Me.columnIM_WITHHOLDING_REMARKS = MyBase.Columns("IM_WITHHOLDING_REMARKS")
            Me.columnIM_WITHHOLDING_TAX = MyBase.Columns("IM_WITHHOLDING_TAX")
            Me.columnWHT_AMT = MyBase.Columns("WHT_AMT")
            Me.columnIM_RECEIPT_NO = MyBase.Columns("IM_RECEIPT_NO")
            Me.columnIM_RECEIPT_DATE = MyBase.Columns("IM_RECEIPT_DATE")
            Me.columnAMT_PAID = MyBase.Columns("AMT_PAID")
            Me.columnWHT_BANK = MyBase.Columns("WHT_BANK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIM_S_COY_NAME = New Global.System.Data.DataColumn("IM_S_COY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_S_COY_NAME)
            Me.columnIC_COUNTRY = New Global.System.Data.DataColumn("IC_COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COUNTRY)
            Me.columnIM_INVOICE_NO = New Global.System.Data.DataColumn("IM_INVOICE_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_NO)
            Me.columnINVOICE_TOTAL = New Global.System.Data.DataColumn("INVOICE_TOTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_TOTAL)
            Me.columnIM_PAYMENT_DATE = New Global.System.Data.DataColumn("IM_PAYMENT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_PAYMENT_DATE)
            Me.columnIM_CURRENCY_CODE = New Global.System.Data.DataColumn("IM_CURRENCY_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_CURRENCY_CODE)
            Me.columnIM_INVOICE_TOTAL = New Global.System.Data.DataColumn("IM_INVOICE_TOTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVOICE_TOTAL)
            Me.columnID_B_GL_CODE = New Global.System.Data.DataColumn("ID_B_GL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_B_GL_CODE)
            Me.columnIM_WITHHOLDING_OPT = New Global.System.Data.DataColumn("IM_WITHHOLDING_OPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_WITHHOLDING_OPT)
            Me.columnIM_WITHHOLDING_REMARKS = New Global.System.Data.DataColumn("IM_WITHHOLDING_REMARKS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_WITHHOLDING_REMARKS)
            Me.columnIM_WITHHOLDING_TAX = New Global.System.Data.DataColumn("IM_WITHHOLDING_TAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_WITHHOLDING_TAX)
            Me.columnWHT_AMT = New Global.System.Data.DataColumn("WHT_AMT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWHT_AMT)
            Me.columnIM_RECEIPT_NO = New Global.System.Data.DataColumn("IM_RECEIPT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_RECEIPT_NO)
            Me.columnIM_RECEIPT_DATE = New Global.System.Data.DataColumn("IM_RECEIPT_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_RECEIPT_DATE)
            Me.columnAMT_PAID = New Global.System.Data.DataColumn("AMT_PAID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMT_PAID)
            Me.columnWHT_BANK = New Global.System.Data.DataColumn("WHT_BANK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWHT_BANK)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataSetPaymentToNonResidentRow() As DataSetPaymentToNonResidentRow
            Return CType(Me.NewRow,DataSetPaymentToNonResidentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataSetPaymentToNonResidentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataSetPaymentToNonResidentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataSetPaymentToNonResidentRowChangedEvent) Is Nothing) Then
                RaiseEvent DataSetPaymentToNonResidentRowChanged(Me, New DataSetPaymentToNonResidentRowChangeEvent(CType(e.Row,DataSetPaymentToNonResidentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataSetPaymentToNonResidentRowChangingEvent) Is Nothing) Then
                RaiseEvent DataSetPaymentToNonResidentRowChanging(Me, New DataSetPaymentToNonResidentRowChangeEvent(CType(e.Row,DataSetPaymentToNonResidentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataSetPaymentToNonResidentRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataSetPaymentToNonResidentRowDeleted(Me, New DataSetPaymentToNonResidentRowChangeEvent(CType(e.Row,DataSetPaymentToNonResidentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataSetPaymentToNonResidentRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataSetPaymentToNonResidentRowDeleting(Me, New DataSetPaymentToNonResidentRowChangeEvent(CType(e.Row,DataSetPaymentToNonResidentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataSetPaymentToNonResidentRow(ByVal row As DataSetPaymentToNonResidentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PaymentToNonResident = New PaymentToNonResident
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataSetPaymentToNonResidentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataSetPaymentToNonResidentRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataSetPaymentToNonResident As DataSetPaymentToNonResidentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataSetPaymentToNonResident = CType(Me.Table,DataSetPaymentToNonResidentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_S_COY_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_S_COY_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_S_COY_NAME' in table 'DataSetPaymentToNonResident' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_S_COY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IC_COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IC_COUNTRY' in table 'DataSetPaymentToNonResident' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IC_COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_INVOICE_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_NO' in table 'DataSetPaymentToNonResident' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_TOTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.INVOICE_TOTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_TOTAL' in table 'DataSetPaymentToNonResident' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.INVOICE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PAYMENT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_PAYMENT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_PAYMENT_DATE' in table 'DataSetPaymentToNonResident' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_PAYMENT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CURRENCY_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_CURRENCY_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_CURRENCY_CODE' in table 'DataSetPaymentToNonResident' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_CURRENCY_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVOICE_TOTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_INVOICE_TOTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_INVOICE_TOTAL' in table 'DataSetPaymentToNonResident' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_INVOICE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_B_GL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.ID_B_GL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_B_GL_CODE' in table 'DataSetPaymentToNonResident' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.ID_B_GL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_WITHHOLDING_OPT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_OPTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_WITHHOLDING_OPT' in table 'DataSetPaymentToNonResident' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_OPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_WITHHOLDING_REMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_REMARKSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_WITHHOLDING_REMARKS' in table 'DataSetPaymentToNonReside"& _ 
                            "nt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_REMARKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_WITHHOLDING_TAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_TAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_WITHHOLDING_TAX' in table 'DataSetPaymentToNonResident' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_TAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WHT_AMT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.WHT_AMTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WHT_AMT' in table 'DataSetPaymentToNonResident' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.WHT_AMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_RECEIPT_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_RECEIPT_NO' in table 'DataSetPaymentToNonResident' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_RECEIPT_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IM_RECEIPT_DATE' in table 'DataSetPaymentToNonResident' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMT_PAID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.AMT_PAIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMT_PAID' in table 'DataSetPaymentToNonResident' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.AMT_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WHT_BANK() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetPaymentToNonResident.WHT_BANKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WHT_BANK' in table 'DataSetPaymentToNonResident' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetPaymentToNonResident.WHT_BANKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_S_COY_NAMENull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_S_COY_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_S_COY_NAMENull()
            Me(Me.tableDataSetPaymentToNonResident.IM_S_COY_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIC_COUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IC_COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIC_COUNTRYNull()
            Me(Me.tableDataSetPaymentToNonResident.IC_COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_NONull()
            Me(Me.tableDataSetPaymentToNonResident.IM_INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.INVOICE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_TOTALNull()
            Me(Me.tableDataSetPaymentToNonResident.INVOICE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_PAYMENT_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_PAYMENT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_PAYMENT_DATENull()
            Me(Me.tableDataSetPaymentToNonResident.IM_PAYMENT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_CURRENCY_CODENull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_CURRENCY_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_CURRENCY_CODENull()
            Me(Me.tableDataSetPaymentToNonResident.IM_CURRENCY_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_INVOICE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_INVOICE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_INVOICE_TOTALNull()
            Me(Me.tableDataSetPaymentToNonResident.IM_INVOICE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_B_GL_CODENull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.ID_B_GL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_B_GL_CODENull()
            Me(Me.tableDataSetPaymentToNonResident.ID_B_GL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_WITHHOLDING_OPTNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_OPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_WITHHOLDING_OPTNull()
            Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_OPTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_WITHHOLDING_REMARKSNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_REMARKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_WITHHOLDING_REMARKSNull()
            Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_REMARKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_WITHHOLDING_TAXNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_TAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_WITHHOLDING_TAXNull()
            Me(Me.tableDataSetPaymentToNonResident.IM_WITHHOLDING_TAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWHT_AMTNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.WHT_AMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWHT_AMTNull()
            Me(Me.tableDataSetPaymentToNonResident.WHT_AMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_RECEIPT_NONull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_RECEIPT_NONull()
            Me(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_RECEIPT_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_RECEIPT_DATENull()
            Me(Me.tableDataSetPaymentToNonResident.IM_RECEIPT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMT_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.AMT_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMT_PAIDNull()
            Me(Me.tableDataSetPaymentToNonResident.AMT_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWHT_BANKNull() As Boolean
            Return Me.IsNull(Me.tableDataSetPaymentToNonResident.WHT_BANKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWHT_BANKNull()
            Me(Me.tableDataSetPaymentToNonResident.WHT_BANKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataSetPaymentToNonResidentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataSetPaymentToNonResidentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataSetPaymentToNonResidentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataSetPaymentToNonResidentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace PaymentToNonResidentTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataSetPaymentToNonResidentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataSetPaymentToNonResident"
            tableMapping.ColumnMappings.Add("IM_S_COY_NAME", "IM_S_COY_NAME")
            tableMapping.ColumnMappings.Add("IC_COUNTRY", "IC_COUNTRY")
            tableMapping.ColumnMappings.Add("IM_INVOICE_NO", "IM_INVOICE_NO")
            tableMapping.ColumnMappings.Add("INVOICE_TOTAL", "INVOICE_TOTAL")
            tableMapping.ColumnMappings.Add("IM_PAYMENT_DATE", "IM_PAYMENT_DATE")
            tableMapping.ColumnMappings.Add("IM_CURRENCY_CODE", "IM_CURRENCY_CODE")
            tableMapping.ColumnMappings.Add("IM_INVOICE_TOTAL", "IM_INVOICE_TOTAL")
            tableMapping.ColumnMappings.Add("ID_B_GL_CODE", "ID_B_GL_CODE")
            tableMapping.ColumnMappings.Add("IM_WITHHOLDING_OPT", "IM_WITHHOLDING_OPT")
            tableMapping.ColumnMappings.Add("IM_WITHHOLDING_REMARKS", "IM_WITHHOLDING_REMARKS")
            tableMapping.ColumnMappings.Add("IM_WITHHOLDING_TAX", "IM_WITHHOLDING_TAX")
            tableMapping.ColumnMappings.Add("WHT_AMT", "WHT_AMT")
            tableMapping.ColumnMappings.Add("IM_RECEIPT_NO", "IM_RECEIPT_NO")
            tableMapping.ColumnMappings.Add("IM_RECEIPT_DATE", "IM_RECEIPT_DATE")
            tableMapping.ColumnMappings.Add("AMT_PAID", "AMT_PAID")
            tableMapping.ColumnMappings.Add("WHT_BANK", "WHT_BANK")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString2").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NULL AS IM_S_COY_NAME, NULL AS IC_COUNTRY, NULL AS IM_INVOICE_NO, NULL AS "& _ 
                "INVOICE_TOTAL, NULL AS IM_PAYMENT_DATE, NULL AS IM_CURRENCY_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"NULL AS IM_I"& _ 
                "NVOICE_TOTAL, NULL AS ID_B_GL_CODE, NULL AS IM_WITHHOLDING_OPT, NULL AS IM_WITHH"& _ 
                "OLDING_REMARKS, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"NULL AS IM_WITHHOLDING_TAX, NULL AS WHT_AMT, NULL AS IM_RECEIP"& _ 
                "T_NO, NULL AS IM_RECEIPT_DATE, NULL AS AMT_PAID, NULL AS WHT_BANK "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM INVOICE"& _ 
                "_MSTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PaymentToNonResident.DataSetPaymentToNonResidentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PaymentToNonResident.DataSetPaymentToNonResidentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PaymentToNonResident.DataSetPaymentToNonResidentDataTable = New PaymentToNonResident.DataSetPaymentToNonResidentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
