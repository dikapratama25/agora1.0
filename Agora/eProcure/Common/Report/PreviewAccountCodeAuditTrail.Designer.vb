'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetAccountCodeAuditTable"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetAccountCodeAuditTable
    Inherits Global.System.Data.DataSet
    
    Private tableDataSetAccountCodeAudit As DataSetAccountCodeAuditDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataSetAccountCodeAudit")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetAccountCodeAuditDataTable(ds.Tables("DataSetAccountCodeAudit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataSetAccountCodeAudit() As DataSetAccountCodeAuditDataTable
        Get
            Return Me.tableDataSetAccountCodeAudit
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetAccountCodeAuditTable = CType(MyBase.Clone,DataSetAccountCodeAuditTable)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataSetAccountCodeAudit")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetAccountCodeAuditDataTable(ds.Tables("DataSetAccountCodeAudit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataSetAccountCodeAudit = CType(MyBase.Tables("DataSetAccountCodeAudit"),DataSetAccountCodeAuditDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataSetAccountCodeAudit) Is Nothing) Then
                Me.tableDataSetAccountCodeAudit.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetAccountCodeAuditTable"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetAccountCodeAuditTable.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataSetAccountCodeAudit = New DataSetAccountCodeAuditDataTable
        MyBase.Tables.Add(Me.tableDataSetAccountCodeAudit)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataSetAccountCodeAudit() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetAccountCodeAuditTable = New DataSetAccountCodeAuditTable
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataSetAccountCodeAuditRowChangeEventHandler(ByVal sender As Object, ByVal e As DataSetAccountCodeAuditRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataSetAccountCodeAuditDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAU_DATE As Global.System.Data.DataColumn
        
        Private columnAU_ACTION As Global.System.Data.DataColumn
        
        Private columnAU_LOG_INDEX As Global.System.Data.DataColumn
        
        Private columnAU_AM_ACCT_MAP_INDEX As Global.System.Data.DataColumn
        
        Private columnAU_AM_F_ACCT_INDEX As Global.System.Data.DataColumn
        
        Private columnAU_AM_F_BR_CODE As Global.System.Data.DataColumn
        
        Private columnAU_AM_F_GL_CODE As Global.System.Data.DataColumn
        
        Private columnAU_AM_F_CC As Global.System.Data.DataColumn
        
        Private columnAU_AM_F_CC_DESC As Global.System.Data.DataColumn
        
        Private columnAU_AM_F_MAP_CODE As Global.System.Data.DataColumn
        
        Private columnAU_AM_T_ACCT_INDEX As Global.System.Data.DataColumn
        
        Private columnAU_AM_T_BR_CODE As Global.System.Data.DataColumn
        
        Private columnAU_AM_T_GL_CODE As Global.System.Data.DataColumn
        
        Private columnAU_AM_T_CC As Global.System.Data.DataColumn
        
        Private columnAU_AM_T_CC_DESC As Global.System.Data.DataColumn
        
        Private columnAU_AM_T_MAP_CODE As Global.System.Data.DataColumn
        
        Private columnAU_USER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataSetAccountCodeAudit"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_ACTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_ACTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_LOG_INDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_LOG_INDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_ACCT_MAP_INDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_ACCT_MAP_INDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_F_ACCT_INDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_F_ACCT_INDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_F_BR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_F_BR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_F_GL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_F_GL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_F_CCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_F_CC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_F_CC_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_F_CC_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_F_MAP_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_F_MAP_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_T_ACCT_INDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_T_ACCT_INDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_T_BR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_T_BR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_T_GL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_T_GL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_T_CCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_T_CC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_T_CC_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_T_CC_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AM_T_MAP_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_AM_T_MAP_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAU_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataSetAccountCodeAuditRow
            Get
                Return CType(Me.Rows(index),DataSetAccountCodeAuditRow)
            End Get
        End Property
        
        Public Event DataSetAccountCodeAuditRowChanging As DataSetAccountCodeAuditRowChangeEventHandler
        
        Public Event DataSetAccountCodeAuditRowChanged As DataSetAccountCodeAuditRowChangeEventHandler
        
        Public Event DataSetAccountCodeAuditRowDeleting As DataSetAccountCodeAuditRowChangeEventHandler
        
        Public Event DataSetAccountCodeAuditRowDeleted As DataSetAccountCodeAuditRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataSetAccountCodeAuditRow(ByVal row As DataSetAccountCodeAuditRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataSetAccountCodeAuditRow( _
                    ByVal AU_DATE As Date,  _
                    ByVal AU_ACTION As String,  _
                    ByVal AU_AM_ACCT_MAP_INDEX As Long,  _
                    ByVal AU_AM_F_ACCT_INDEX As Long,  _
                    ByVal AU_AM_F_BR_CODE As String,  _
                    ByVal AU_AM_F_GL_CODE As String,  _
                    ByVal AU_AM_F_CC As String,  _
                    ByVal AU_AM_F_CC_DESC As String,  _
                    ByVal AU_AM_F_MAP_CODE As String,  _
                    ByVal AU_AM_T_ACCT_INDEX As Long,  _
                    ByVal AU_AM_T_BR_CODE As String,  _
                    ByVal AU_AM_T_GL_CODE As String,  _
                    ByVal AU_AM_T_CC As String,  _
                    ByVal AU_AM_T_CC_DESC As String,  _
                    ByVal AU_AM_T_MAP_CODE As String,  _
                    ByVal AU_USER As String) As DataSetAccountCodeAuditRow
            Dim rowDataSetAccountCodeAuditRow As DataSetAccountCodeAuditRow = CType(Me.NewRow,DataSetAccountCodeAuditRow)
            Dim columnValuesArray() As Object = New Object() {AU_DATE, AU_ACTION, Nothing, AU_AM_ACCT_MAP_INDEX, AU_AM_F_ACCT_INDEX, AU_AM_F_BR_CODE, AU_AM_F_GL_CODE, AU_AM_F_CC, AU_AM_F_CC_DESC, AU_AM_F_MAP_CODE, AU_AM_T_ACCT_INDEX, AU_AM_T_BR_CODE, AU_AM_T_GL_CODE, AU_AM_T_CC, AU_AM_T_CC_DESC, AU_AM_T_MAP_CODE, AU_USER}
            rowDataSetAccountCodeAuditRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataSetAccountCodeAuditRow)
            Return rowDataSetAccountCodeAuditRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAU_LOG_INDEX(ByVal AU_LOG_INDEX As Long) As DataSetAccountCodeAuditRow
            Return CType(Me.Rows.Find(New Object() {AU_LOG_INDEX}),DataSetAccountCodeAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataSetAccountCodeAuditDataTable = CType(MyBase.Clone,DataSetAccountCodeAuditDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataSetAccountCodeAuditDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAU_DATE = MyBase.Columns("AU_DATE")
            Me.columnAU_ACTION = MyBase.Columns("AU_ACTION")
            Me.columnAU_LOG_INDEX = MyBase.Columns("AU_LOG_INDEX")
            Me.columnAU_AM_ACCT_MAP_INDEX = MyBase.Columns("AU_AM_ACCT_MAP_INDEX")
            Me.columnAU_AM_F_ACCT_INDEX = MyBase.Columns("AU_AM_F_ACCT_INDEX")
            Me.columnAU_AM_F_BR_CODE = MyBase.Columns("AU_AM_F_BR_CODE")
            Me.columnAU_AM_F_GL_CODE = MyBase.Columns("AU_AM_F_GL_CODE")
            Me.columnAU_AM_F_CC = MyBase.Columns("AU_AM_F_CC")
            Me.columnAU_AM_F_CC_DESC = MyBase.Columns("AU_AM_F_CC_DESC")
            Me.columnAU_AM_F_MAP_CODE = MyBase.Columns("AU_AM_F_MAP_CODE")
            Me.columnAU_AM_T_ACCT_INDEX = MyBase.Columns("AU_AM_T_ACCT_INDEX")
            Me.columnAU_AM_T_BR_CODE = MyBase.Columns("AU_AM_T_BR_CODE")
            Me.columnAU_AM_T_GL_CODE = MyBase.Columns("AU_AM_T_GL_CODE")
            Me.columnAU_AM_T_CC = MyBase.Columns("AU_AM_T_CC")
            Me.columnAU_AM_T_CC_DESC = MyBase.Columns("AU_AM_T_CC_DESC")
            Me.columnAU_AM_T_MAP_CODE = MyBase.Columns("AU_AM_T_MAP_CODE")
            Me.columnAU_USER = MyBase.Columns("AU_USER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAU_DATE = New Global.System.Data.DataColumn("AU_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_DATE)
            Me.columnAU_ACTION = New Global.System.Data.DataColumn("AU_ACTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_ACTION)
            Me.columnAU_LOG_INDEX = New Global.System.Data.DataColumn("AU_LOG_INDEX", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_LOG_INDEX)
            Me.columnAU_AM_ACCT_MAP_INDEX = New Global.System.Data.DataColumn("AU_AM_ACCT_MAP_INDEX", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_ACCT_MAP_INDEX)
            Me.columnAU_AM_F_ACCT_INDEX = New Global.System.Data.DataColumn("AU_AM_F_ACCT_INDEX", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_F_ACCT_INDEX)
            Me.columnAU_AM_F_BR_CODE = New Global.System.Data.DataColumn("AU_AM_F_BR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_F_BR_CODE)
            Me.columnAU_AM_F_GL_CODE = New Global.System.Data.DataColumn("AU_AM_F_GL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_F_GL_CODE)
            Me.columnAU_AM_F_CC = New Global.System.Data.DataColumn("AU_AM_F_CC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_F_CC)
            Me.columnAU_AM_F_CC_DESC = New Global.System.Data.DataColumn("AU_AM_F_CC_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_F_CC_DESC)
            Me.columnAU_AM_F_MAP_CODE = New Global.System.Data.DataColumn("AU_AM_F_MAP_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_F_MAP_CODE)
            Me.columnAU_AM_T_ACCT_INDEX = New Global.System.Data.DataColumn("AU_AM_T_ACCT_INDEX", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_T_ACCT_INDEX)
            Me.columnAU_AM_T_BR_CODE = New Global.System.Data.DataColumn("AU_AM_T_BR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_T_BR_CODE)
            Me.columnAU_AM_T_GL_CODE = New Global.System.Data.DataColumn("AU_AM_T_GL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_T_GL_CODE)
            Me.columnAU_AM_T_CC = New Global.System.Data.DataColumn("AU_AM_T_CC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_T_CC)
            Me.columnAU_AM_T_CC_DESC = New Global.System.Data.DataColumn("AU_AM_T_CC_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_T_CC_DESC)
            Me.columnAU_AM_T_MAP_CODE = New Global.System.Data.DataColumn("AU_AM_T_MAP_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AM_T_MAP_CODE)
            Me.columnAU_USER = New Global.System.Data.DataColumn("AU_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_USER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAU_LOG_INDEX}, true))
            Me.columnAU_DATE.AllowDBNull = false
            Me.columnAU_ACTION.AllowDBNull = false
            Me.columnAU_ACTION.MaxLength = 1
            Me.columnAU_LOG_INDEX.AutoIncrement = true
            Me.columnAU_LOG_INDEX.AllowDBNull = false
            Me.columnAU_LOG_INDEX.Unique = true
            Me.columnAU_AM_ACCT_MAP_INDEX.AllowDBNull = false
            Me.columnAU_AM_F_ACCT_INDEX.AllowDBNull = false
            Me.columnAU_AM_F_BR_CODE.AllowDBNull = false
            Me.columnAU_AM_F_BR_CODE.MaxLength = 10
            Me.columnAU_AM_F_GL_CODE.AllowDBNull = false
            Me.columnAU_AM_F_GL_CODE.MaxLength = 30
            Me.columnAU_AM_F_CC.AllowDBNull = false
            Me.columnAU_AM_F_CC.MaxLength = 30
            Me.columnAU_AM_F_CC_DESC.AllowDBNull = false
            Me.columnAU_AM_F_CC_DESC.MaxLength = 100
            Me.columnAU_AM_F_MAP_CODE.AllowDBNull = false
            Me.columnAU_AM_F_MAP_CODE.MaxLength = 20
            Me.columnAU_AM_T_ACCT_INDEX.AllowDBNull = false
            Me.columnAU_AM_T_BR_CODE.AllowDBNull = false
            Me.columnAU_AM_T_BR_CODE.MaxLength = 10
            Me.columnAU_AM_T_GL_CODE.AllowDBNull = false
            Me.columnAU_AM_T_GL_CODE.MaxLength = 30
            Me.columnAU_AM_T_CC.AllowDBNull = false
            Me.columnAU_AM_T_CC.MaxLength = 30
            Me.columnAU_AM_T_CC_DESC.AllowDBNull = false
            Me.columnAU_AM_T_CC_DESC.MaxLength = 100
            Me.columnAU_AM_T_MAP_CODE.AllowDBNull = false
            Me.columnAU_AM_T_MAP_CODE.MaxLength = 20
            Me.columnAU_USER.AllowDBNull = false
            Me.columnAU_USER.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataSetAccountCodeAuditRow() As DataSetAccountCodeAuditRow
            Return CType(Me.NewRow,DataSetAccountCodeAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataSetAccountCodeAuditRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataSetAccountCodeAuditRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataSetAccountCodeAuditRowChangedEvent) Is Nothing) Then
                RaiseEvent DataSetAccountCodeAuditRowChanged(Me, New DataSetAccountCodeAuditRowChangeEvent(CType(e.Row,DataSetAccountCodeAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataSetAccountCodeAuditRowChangingEvent) Is Nothing) Then
                RaiseEvent DataSetAccountCodeAuditRowChanging(Me, New DataSetAccountCodeAuditRowChangeEvent(CType(e.Row,DataSetAccountCodeAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataSetAccountCodeAuditRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataSetAccountCodeAuditRowDeleted(Me, New DataSetAccountCodeAuditRowChangeEvent(CType(e.Row,DataSetAccountCodeAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataSetAccountCodeAuditRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataSetAccountCodeAuditRowDeleting(Me, New DataSetAccountCodeAuditRowChangeEvent(CType(e.Row,DataSetAccountCodeAuditRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataSetAccountCodeAuditRow(ByVal row As DataSetAccountCodeAuditRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetAccountCodeAuditTable = New DataSetAccountCodeAuditTable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataSetAccountCodeAuditDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataSetAccountCodeAuditRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataSetAccountCodeAudit As DataSetAccountCodeAuditDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataSetAccountCodeAudit = CType(Me.Table,DataSetAccountCodeAuditDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_DATE() As Date
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_ACTION() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_ACTIONColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_ACTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_LOG_INDEX() As Long
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_LOG_INDEXColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_LOG_INDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_ACCT_MAP_INDEX() As Long
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_ACCT_MAP_INDEXColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_ACCT_MAP_INDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_F_ACCT_INDEX() As Long
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_ACCT_INDEXColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_ACCT_INDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_F_BR_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_BR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_BR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_F_GL_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_GL_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_GL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_F_CC() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_CCColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_CCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_F_CC_DESC() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_CC_DESCColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_CC_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_F_MAP_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_MAP_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_F_MAP_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_T_ACCT_INDEX() As Long
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_ACCT_INDEXColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_ACCT_INDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_T_BR_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_BR_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_BR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_T_GL_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_GL_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_GL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_T_CC() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_CCColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_CCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_T_CC_DESC() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_CC_DESCColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_CC_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AM_T_MAP_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_MAP_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_AM_T_MAP_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_USER() As String
            Get
                Return CType(Me(Me.tableDataSetAccountCodeAudit.AU_USERColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAccountCodeAudit.AU_USERColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataSetAccountCodeAuditRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataSetAccountCodeAuditRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataSetAccountCodeAuditRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataSetAccountCodeAuditRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetAccountCodeAuditTableTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataSetAccountCodeAuditTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataSetAccountCodeAudit"
            tableMapping.ColumnMappings.Add("AU_DATE", "AU_DATE")
            tableMapping.ColumnMappings.Add("AU_ACTION", "AU_ACTION")
            tableMapping.ColumnMappings.Add("AU_LOG_INDEX", "AU_LOG_INDEX")
            tableMapping.ColumnMappings.Add("AU_AM_ACCT_MAP_INDEX", "AU_AM_ACCT_MAP_INDEX")
            tableMapping.ColumnMappings.Add("AU_AM_F_ACCT_INDEX", "AU_AM_F_ACCT_INDEX")
            tableMapping.ColumnMappings.Add("AU_AM_F_BR_CODE", "AU_AM_F_BR_CODE")
            tableMapping.ColumnMappings.Add("AU_AM_F_GL_CODE", "AU_AM_F_GL_CODE")
            tableMapping.ColumnMappings.Add("AU_AM_F_CC", "AU_AM_F_CC")
            tableMapping.ColumnMappings.Add("AU_AM_F_CC_DESC", "AU_AM_F_CC_DESC")
            tableMapping.ColumnMappings.Add("AU_AM_F_MAP_CODE", "AU_AM_F_MAP_CODE")
            tableMapping.ColumnMappings.Add("AU_AM_T_ACCT_INDEX", "AU_AM_T_ACCT_INDEX")
            tableMapping.ColumnMappings.Add("AU_AM_T_BR_CODE", "AU_AM_T_BR_CODE")
            tableMapping.ColumnMappings.Add("AU_AM_T_GL_CODE", "AU_AM_T_GL_CODE")
            tableMapping.ColumnMappings.Add("AU_AM_T_CC", "AU_AM_T_CC")
            tableMapping.ColumnMappings.Add("AU_AM_T_CC_DESC", "AU_AM_T_CC_DESC")
            tableMapping.ColumnMappings.Add("AU_AM_T_MAP_CODE", "AU_AM_T_MAP_CODE")
            tableMapping.ColumnMappings.Add("AU_USER", "AU_USER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `eprocure`.`au_account_mapping` WHERE ((`AU_LOG_INDEX` = @Original_AU"& _ 
                "_LOG_INDEX))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AU_LOG_INDEX"
            param.DbType = Global.System.Data.DbType.Int64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "AU_LOG_INDEX"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `eprocure`.`au_account_mapping` SET `AU_AM_ACCT_MAP_INDEX` = @AU_AM_ACCT_M"& _ 
                "AP_INDEX, `AU_AM_F_ACCT_INDEX` = @AU_AM_F_ACCT_INDEX, `AU_AM_F_BR_CODE` = @AU_AM"& _ 
                "_F_BR_CODE, `AU_AM_F_GL_CODE` = @AU_AM_F_GL_CODE, `AU_AM_F_CC` = @AU_AM_F_CC, `A"& _ 
                "U_AM_F_CC_DESC` = @AU_AM_F_CC_DESC, `AU_AM_F_MAP_CODE` = @AU_AM_F_MAP_CODE, `AU_"& _ 
                "AM_T_ACCT_INDEX` = @AU_AM_T_ACCT_INDEX, `AU_AM_T_BR_CODE` = @AU_AM_T_BR_CODE, `A"& _ 
                "U_AM_T_GL_CODE` = @AU_AM_T_GL_CODE, `AU_AM_T_CC` = @AU_AM_T_CC, `AU_AM_T_CC_DESC"& _ 
                "` = @AU_AM_T_CC_DESC, `AU_AM_T_MAP_CODE` = @AU_AM_T_MAP_CODE, `AU_USER` = @AU_US"& _ 
                "ER, `AU_DATE` = @AU_DATE, `AU_ACTION` = @AU_ACTION WHERE ((`AU_LOG_INDEX` = @Ori"& _ 
                "ginal_AU_LOG_INDEX))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_ACCT_MAP_INDEX"
            param.DbType = Global.System.Data.DbType.Int64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "AU_AM_ACCT_MAP_INDEX"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_F_ACCT_INDEX"
            param.DbType = Global.System.Data.DbType.Int64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "AU_AM_F_ACCT_INDEX"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_F_BR_CODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_F_BR_CODE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_F_GL_CODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_F_GL_CODE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_F_CC"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_F_CC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_F_CC_DESC"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_F_CC_DESC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_F_MAP_CODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_F_MAP_CODE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_T_ACCT_INDEX"
            param.DbType = Global.System.Data.DbType.Int64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "AU_AM_T_ACCT_INDEX"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_T_BR_CODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_T_BR_CODE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_T_GL_CODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_T_GL_CODE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_T_CC"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_T_CC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_T_CC_DESC"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_T_CC_DESC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_AM_T_MAP_CODE"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_AM_T_MAP_CODE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_USER"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "AU_USER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_DATE"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "AU_DATE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@AU_ACTION"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
            param.IsNullable = true
            param.SourceColumn = "AU_ACTION"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@Original_AU_LOG_INDEX"
            param.DbType = Global.System.Data.DbType.Int64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int64
            param.IsNullable = true
            param.SourceColumn = "AU_LOG_INDEX"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString1").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT AU_LOG_INDEX, AU_AM_ACCT_MAP_INDEX, AU_AM_F_ACCT_INDEX, AU_AM_F_BR_CODE, A"& _ 
                "U_AM_F_GL_CODE, AU_AM_F_CC, AU_AM_F_CC_DESC, AU_AM_F_MAP_CODE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"AU_AM_T_ACCT_IN"& _ 
                "DEX, AU_AM_T_BR_CODE, AU_AM_T_GL_CODE, AU_AM_T_CC, AU_AM_T_CC_DESC, AU_AM_T_MAP_"& _ 
                "CODE, AU_USER, AU_DATE, AU_ACTION "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM au_account_mapping"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INNER JOIN user_mst"& _ 
                "r "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ON au_account_mapping.AU_USER = user_mstr.UM_USER_ID AND user_mstr.UM_COY_ID"& _ 
                " = AU_AM_COY_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetAccountCodeAuditTable.DataSetAccountCodeAuditDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetAccountCodeAuditTable.DataSetAccountCodeAuditDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetAccountCodeAuditTable.DataSetAccountCodeAuditDataTable = New DataSetAccountCodeAuditTable.DataSetAccountCodeAuditDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetAccountCodeAuditTable.DataSetAccountCodeAuditDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetAccountCodeAuditTable) As Integer
            Return Me.Adapter.Update(dataSet, "DataSetAccountCodeAudit")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_AU_LOG_INDEX As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_AU_LOG_INDEX,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal AU_AM_ACCT_MAP_INDEX As Long,  _
                    ByVal AU_AM_F_ACCT_INDEX As Long,  _
                    ByVal AU_AM_F_BR_CODE As String,  _
                    ByVal AU_AM_F_GL_CODE As String,  _
                    ByVal AU_AM_F_CC As String,  _
                    ByVal AU_AM_F_CC_DESC As String,  _
                    ByVal AU_AM_F_MAP_CODE As String,  _
                    ByVal AU_AM_T_ACCT_INDEX As Long,  _
                    ByVal AU_AM_T_BR_CODE As String,  _
                    ByVal AU_AM_T_GL_CODE As String,  _
                    ByVal AU_AM_T_CC As String,  _
                    ByVal AU_AM_T_CC_DESC As String,  _
                    ByVal AU_AM_T_MAP_CODE As String,  _
                    ByVal AU_USER As String,  _
                    ByVal AU_DATE As Date,  _
                    ByVal AU_ACTION As String,  _
                    ByVal Original_AU_LOG_INDEX As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(AU_AM_ACCT_MAP_INDEX,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AU_AM_F_ACCT_INDEX,Long)
            If (AU_AM_F_BR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_F_BR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AU_AM_F_BR_CODE,String)
            End If
            If (AU_AM_F_GL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_F_GL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AU_AM_F_GL_CODE,String)
            End If
            If (AU_AM_F_CC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_F_CC")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AU_AM_F_CC,String)
            End If
            If (AU_AM_F_CC_DESC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_F_CC_DESC")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(AU_AM_F_CC_DESC,String)
            End If
            If (AU_AM_F_MAP_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_F_MAP_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(AU_AM_F_MAP_CODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(AU_AM_T_ACCT_INDEX,Long)
            If (AU_AM_T_BR_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_T_BR_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(AU_AM_T_BR_CODE,String)
            End If
            If (AU_AM_T_GL_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_T_GL_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(AU_AM_T_GL_CODE,String)
            End If
            If (AU_AM_T_CC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_T_CC")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(AU_AM_T_CC,String)
            End If
            If (AU_AM_T_CC_DESC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_T_CC_DESC")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(AU_AM_T_CC_DESC,String)
            End If
            If (AU_AM_T_MAP_CODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_AM_T_MAP_CODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(AU_AM_T_MAP_CODE,String)
            End If
            If (AU_USER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_USER")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(AU_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(AU_DATE,Date)
            If (AU_ACTION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AU_ACTION")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(AU_ACTION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_AU_LOG_INDEX,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
