'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("PreviewAuditTrail"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PreviewAuditTrail
    Inherits System.Data.DataSet
    
    Private tableDataSetAuditTrail As DataSetAuditTrailDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataSetAuditTrail")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetAuditTrailDataTable(ds.Tables("DataSetAuditTrail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataSetAuditTrail() As DataSetAuditTrailDataTable
        Get
            Return Me.tableDataSetAuditTrail
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As PreviewAuditTrail = CType(MyBase.Clone,PreviewAuditTrail)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataSetAuditTrail")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetAuditTrailDataTable(ds.Tables("DataSetAuditTrail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataSetAuditTrail = CType(MyBase.Tables("DataSetAuditTrail"),DataSetAuditTrailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataSetAuditTrail) Is Nothing) Then
                Me.tableDataSetAuditTrail.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PreviewAuditTrail"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PreviewAuditTrail.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataSetAuditTrail = New DataSetAuditTrailDataTable
        MyBase.Tables.Add(Me.tableDataSetAuditTrail)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataSetAuditTrail() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PreviewAuditTrail = New PreviewAuditTrail
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub DataSetAuditTrailRowChangeEventHandler(ByVal sender As Object, ByVal e As DataSetAuditTrailRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataSetAuditTrailDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAU_LOG_INDEX As System.Data.DataColumn
        
        Private columnAU_GROUP_INDEX As System.Data.DataColumn
        
        Private columnCDM_GROUP_CODE As System.Data.DataColumn
        
        Private columnAU_DATE As System.Data.DataColumn
        
        Private columnAU_MODULE As System.Data.DataColumn
        
        Private columnAU_ACTION As System.Data.DataColumn
        
        Private columnAU_DESC As System.Data.DataColumn
        
        Private columnAU_BEFORE As System.Data.DataColumn
        
        Private columnAU_AFTER As System.Data.DataColumn
        
        Private columnUM_USER_NAME As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataSetAuditTrail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_LOG_INDEXColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_LOG_INDEX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_GROUP_INDEXColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_GROUP_INDEX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDM_GROUP_CODEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCDM_GROUP_CODE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_MODULEColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_MODULE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_ACTIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_ACTION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_BEFOREColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_BEFORE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AU_AFTERColumn() As System.Data.DataColumn
            Get
                Return Me.columnAU_AFTER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UM_USER_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnUM_USER_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataSetAuditTrailRow
            Get
                Return CType(Me.Rows(index),DataSetAuditTrailRow)
            End Get
        End Property
        
        Public Event DataSetAuditTrailRowChanging As DataSetAuditTrailRowChangeEventHandler
        
        Public Event DataSetAuditTrailRowChanged As DataSetAuditTrailRowChangeEventHandler
        
        Public Event DataSetAuditTrailRowDeleting As DataSetAuditTrailRowChangeEventHandler
        
        Public Event DataSetAuditTrailRowDeleted As DataSetAuditTrailRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataSetAuditTrailRow(ByVal row As DataSetAuditTrailRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataSetAuditTrailRow(ByVal AU_GROUP_INDEX As Long, ByVal CDM_GROUP_CODE As String, ByVal AU_DATE As Date, ByVal AU_MODULE As String, ByVal AU_ACTION As String, ByVal AU_DESC As String, ByVal AU_BEFORE As String, ByVal AU_AFTER As String, ByVal UM_USER_NAME As String) As DataSetAuditTrailRow
            Dim rowDataSetAuditTrailRow As DataSetAuditTrailRow = CType(Me.NewRow,DataSetAuditTrailRow)
            rowDataSetAuditTrailRow.ItemArray = New Object() {Nothing, AU_GROUP_INDEX, CDM_GROUP_CODE, AU_DATE, AU_MODULE, AU_ACTION, AU_DESC, AU_BEFORE, AU_AFTER, UM_USER_NAME}
            Me.Rows.Add(rowDataSetAuditTrailRow)
            Return rowDataSetAuditTrailRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAU_LOG_INDEX(ByVal AU_LOG_INDEX As Long) As DataSetAuditTrailRow
            Return CType(Me.Rows.Find(New Object() {AU_LOG_INDEX}),DataSetAuditTrailRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DataSetAuditTrailDataTable = CType(MyBase.Clone,DataSetAuditTrailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DataSetAuditTrailDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAU_LOG_INDEX = MyBase.Columns("AU_LOG_INDEX")
            Me.columnAU_GROUP_INDEX = MyBase.Columns("AU_GROUP_INDEX")
            Me.columnCDM_GROUP_CODE = MyBase.Columns("CDM_GROUP_CODE")
            Me.columnAU_DATE = MyBase.Columns("AU_DATE")
            Me.columnAU_MODULE = MyBase.Columns("AU_MODULE")
            Me.columnAU_ACTION = MyBase.Columns("AU_ACTION")
            Me.columnAU_DESC = MyBase.Columns("AU_DESC")
            Me.columnAU_BEFORE = MyBase.Columns("AU_BEFORE")
            Me.columnAU_AFTER = MyBase.Columns("AU_AFTER")
            Me.columnUM_USER_NAME = MyBase.Columns("UM_USER_NAME")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAU_LOG_INDEX = New System.Data.DataColumn("AU_LOG_INDEX", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_LOG_INDEX)
            Me.columnAU_GROUP_INDEX = New System.Data.DataColumn("AU_GROUP_INDEX", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_GROUP_INDEX)
            Me.columnCDM_GROUP_CODE = New System.Data.DataColumn("CDM_GROUP_CODE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDM_GROUP_CODE)
            Me.columnAU_DATE = New System.Data.DataColumn("AU_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_DATE)
            Me.columnAU_MODULE = New System.Data.DataColumn("AU_MODULE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_MODULE)
            Me.columnAU_ACTION = New System.Data.DataColumn("AU_ACTION", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_ACTION)
            Me.columnAU_DESC = New System.Data.DataColumn("AU_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_DESC)
            Me.columnAU_BEFORE = New System.Data.DataColumn("AU_BEFORE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_BEFORE)
            Me.columnAU_AFTER = New System.Data.DataColumn("AU_AFTER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAU_AFTER)
            Me.columnUM_USER_NAME = New System.Data.DataColumn("UM_USER_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUM_USER_NAME)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnAU_LOG_INDEX}, true))
            Me.columnAU_LOG_INDEX.AutoIncrement = true
            Me.columnAU_LOG_INDEX.AllowDBNull = false
            Me.columnAU_LOG_INDEX.Unique = true
            Me.columnAU_GROUP_INDEX.AllowDBNull = false
            Me.columnCDM_GROUP_CODE.AllowDBNull = false
            Me.columnCDM_GROUP_CODE.MaxLength = 30
            Me.columnAU_MODULE.MaxLength = 3
            Me.columnAU_ACTION.MaxLength = 3
            Me.columnAU_DESC.MaxLength = 100
            Me.columnAU_BEFORE.MaxLength = 400
            Me.columnAU_AFTER.MaxLength = 400
            Me.columnUM_USER_NAME.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataSetAuditTrailRow() As DataSetAuditTrailRow
            Return CType(Me.NewRow,DataSetAuditTrailRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DataSetAuditTrailRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DataSetAuditTrailRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataSetAuditTrailRowChangedEvent) Is Nothing) Then
                RaiseEvent DataSetAuditTrailRowChanged(Me, New DataSetAuditTrailRowChangeEvent(CType(e.Row,DataSetAuditTrailRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataSetAuditTrailRowChangingEvent) Is Nothing) Then
                RaiseEvent DataSetAuditTrailRowChanging(Me, New DataSetAuditTrailRowChangeEvent(CType(e.Row,DataSetAuditTrailRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataSetAuditTrailRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataSetAuditTrailRowDeleted(Me, New DataSetAuditTrailRowChangeEvent(CType(e.Row,DataSetAuditTrailRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataSetAuditTrailRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataSetAuditTrailRowDeleting(Me, New DataSetAuditTrailRowChangeEvent(CType(e.Row,DataSetAuditTrailRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataSetAuditTrailRow(ByVal row As DataSetAuditTrailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As PreviewAuditTrail = New PreviewAuditTrail
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataSetAuditTrailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataSetAuditTrailRow
        Inherits System.Data.DataRow
        
        Private tableDataSetAuditTrail As DataSetAuditTrailDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataSetAuditTrail = CType(Me.Table,DataSetAuditTrailDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_LOG_INDEX() As Long
            Get
                Return CType(Me(Me.tableDataSetAuditTrail.AU_LOG_INDEXColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_LOG_INDEXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_GROUP_INDEX() As Long
            Get
                Return CType(Me(Me.tableDataSetAuditTrail.AU_GROUP_INDEXColumn),Long)
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_GROUP_INDEXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDM_GROUP_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetAuditTrail.CDM_GROUP_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.CDM_GROUP_CODEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataSetAuditTrail.AU_DATEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AU_DATE' in table 'DataSetAuditTrail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_MODULE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetAuditTrail.AU_MODULEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AU_MODULE' in table 'DataSetAuditTrail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_MODULEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_ACTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetAuditTrail.AU_ACTIONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AU_ACTION' in table 'DataSetAuditTrail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_ACTIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetAuditTrail.AU_DESCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AU_DESC' in table 'DataSetAuditTrail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_BEFORE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetAuditTrail.AU_BEFOREColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AU_BEFORE' in table 'DataSetAuditTrail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_BEFOREColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AU_AFTER() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetAuditTrail.AU_AFTERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AU_AFTER' in table 'DataSetAuditTrail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.AU_AFTERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UM_USER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataSetAuditTrail.UM_USER_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UM_USER_NAME' in table 'DataSetAuditTrail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataSetAuditTrail.UM_USER_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAU_DATENull() As Boolean
            Return Me.IsNull(Me.tableDataSetAuditTrail.AU_DATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAU_DATENull()
            Me(Me.tableDataSetAuditTrail.AU_DATEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAU_MODULENull() As Boolean
            Return Me.IsNull(Me.tableDataSetAuditTrail.AU_MODULEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAU_MODULENull()
            Me(Me.tableDataSetAuditTrail.AU_MODULEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAU_ACTIONNull() As Boolean
            Return Me.IsNull(Me.tableDataSetAuditTrail.AU_ACTIONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAU_ACTIONNull()
            Me(Me.tableDataSetAuditTrail.AU_ACTIONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAU_DESCNull() As Boolean
            Return Me.IsNull(Me.tableDataSetAuditTrail.AU_DESCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAU_DESCNull()
            Me(Me.tableDataSetAuditTrail.AU_DESCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAU_BEFORENull() As Boolean
            Return Me.IsNull(Me.tableDataSetAuditTrail.AU_BEFOREColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAU_BEFORENull()
            Me(Me.tableDataSetAuditTrail.AU_BEFOREColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAU_AFTERNull() As Boolean
            Return Me.IsNull(Me.tableDataSetAuditTrail.AU_AFTERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAU_AFTERNull()
            Me(Me.tableDataSetAuditTrail.AU_AFTERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUM_USER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableDataSetAuditTrail.UM_USER_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUM_USER_NAMENull()
            Me(Me.tableDataSetAuditTrail.UM_USER_NAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataSetAuditTrailRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DataSetAuditTrailRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataSetAuditTrailRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataSetAuditTrailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace PreviewAuditTrailTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataSetAuditTrailTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataSetAuditTrail"
            tableMapping.ColumnMappings.Add("AU_LOG_INDEX", "AU_LOG_INDEX")
            tableMapping.ColumnMappings.Add("AU_GROUP_INDEX", "AU_GROUP_INDEX")
            tableMapping.ColumnMappings.Add("CDM_GROUP_CODE", "CDM_GROUP_CODE")
            tableMapping.ColumnMappings.Add("AU_DATE", "AU_DATE")
            tableMapping.ColumnMappings.Add("AU_MODULE", "AU_MODULE")
            tableMapping.ColumnMappings.Add("AU_ACTION", "AU_ACTION")
            tableMapping.ColumnMappings.Add("AU_DESC", "AU_DESC")
            tableMapping.ColumnMappings.Add("AU_BEFORE", "AU_BEFORE")
            tableMapping.ColumnMappings.Add("AU_AFTER", "AU_AFTER")
            tableMapping.ColumnMappings.Add("UM_USER_NAME", "UM_USER_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString1").ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     au_contract.AU_LOG_INDEX, au_contract.AU_GROUP_INDEX, contract_dist_ms"& _ 
                "tr.CDM_GROUP_CODE, au_contract.AU_DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      au_contract.AU_M"& _ 
                "ODULE, au_contract.AU_ACTION, au_contract.AU_DESC, au_contract.AU_BEFORE, au_con"& _ 
                "tract.AU_AFTER, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      user_mstr.UM_USER_NAME"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         au_"& _ 
                "contract INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      contract_dist_mstr ON contract_dist_m"& _ 
                "str.CDM_GROUP_INDEX = au_contract.AU_GROUP_INDEX INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "   user_mstr ON au_contract.AU_USER = user_mstr.UM_USER_ID AND user_mstr.UM_COY_"& _ 
                "ID = au_contract.AU_COY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (au_contract.AU_GROUP_INDEX = 207) AND (au_co"& _ 
                "ntract.AU_COY = 'tanac')"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY au_contract.AU_LOG_INDEX"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillAD(ByVal dataTable As PreviewAuditTrail.DataSetAuditTrailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataAD() As PreviewAuditTrail.DataSetAuditTrailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PreviewAuditTrail.DataSetAuditTrailDataTable = New PreviewAuditTrail.DataSetAuditTrailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
