'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("VendorListing"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class VendorListing
    Inherits Global.System.Data.DataSet
    
    Private tableVendorListing As VendorListingDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VendorListing")) Is Nothing) Then
                MyBase.Tables.Add(New VendorListingDataTable(ds.Tables("VendorListing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _VendorListing() As VendorListingDataTable
        Get
            Return Me.tableVendorListing
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As VendorListing = CType(MyBase.Clone,VendorListing)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VendorListing")) Is Nothing) Then
                MyBase.Tables.Add(New VendorListingDataTable(ds.Tables("VendorListing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVendorListing = CType(MyBase.Tables("VendorListing"),VendorListingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVendorListing) Is Nothing) Then
                Me.tableVendorListing.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "VendorListing"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/VendorListing.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVendorListing = New VendorListingDataTable
        MyBase.Tables.Add(Me.tableVendorListing)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_VendorListing() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As VendorListing = New VendorListing
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VendorListingRowChangeEventHandler(ByVal sender As Object, ByVal e As VendorListingRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VendorListingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnic_coy_name As Global.System.Data.DataColumn
        
        Private columnic_other_b_coy_code As Global.System.Data.DataColumn
        
        Private columnic_status As Global.System.Data.DataColumn
        
        Private columnic_business_reg_no As Global.System.Data.DataColumn
        
        Private columnic_bank_acct As Global.System.Data.DataColumn
        
        Private columnic_payment_method As Global.System.Data.DataColumn
        
        Private columnic_bank_code As Global.System.Data.DataColumn
        
        Private columnic_addr_line1 As Global.System.Data.DataColumn
        
        Private columnic_ent_by As Global.System.Data.DataColumn
        
        Private columnic_ent_datetime As Global.System.Data.DataColumn
        
        Private columnic_mod_by As Global.System.Data.DataColumn
        
        Private columnic_mod_datetime As Global.System.Data.DataColumn
        
        Private columnbc_bank_name As Global.System.Data.DataColumn
        
        Private columnic_coy_id As Global.System.Data.DataColumn
        
        Private columnic_coy_type As Global.System.Data.DataColumn
        
        Private columnic_remark As Global.System.Data.DataColumn
        
        Private columnresident_country As Global.System.Data.DataColumn
        
        Private columncategory As Global.System.Data.DataColumn
        
        Private columnic_resident_type As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VendorListing"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_coy_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_coy_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_other_b_coy_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_other_b_coy_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_business_reg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_business_reg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_bank_acctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_bank_acct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_payment_methodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_payment_method
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_bank_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_bank_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_addr_line1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_addr_line1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_ent_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_ent_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_ent_datetimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_ent_datetime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_mod_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_mod_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_mod_datetimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_mod_datetime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bc_bank_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbc_bank_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_coy_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_coy_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_coy_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_coy_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_remarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_remark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property resident_countryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresident_country
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property categoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ic_resident_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnic_resident_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VendorListingRow
            Get
                Return CType(Me.Rows(index),VendorListingRow)
            End Get
        End Property
        
        Public Event VendorListingRowChanging As VendorListingRowChangeEventHandler
        
        Public Event VendorListingRowChanged As VendorListingRowChangeEventHandler
        
        Public Event VendorListingRowDeleting As VendorListingRowChangeEventHandler
        
        Public Event VendorListingRowDeleted As VendorListingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVendorListingRow(ByVal row As VendorListingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVendorListingRow( _
                    ByVal ic_coy_name As String,  _
                    ByVal ic_other_b_coy_code As String,  _
                    ByVal ic_status As String,  _
                    ByVal ic_business_reg_no As String,  _
                    ByVal ic_bank_acct As String,  _
                    ByVal ic_payment_method As String,  _
                    ByVal ic_bank_code As String,  _
                    ByVal ic_addr_line1 As String,  _
                    ByVal ic_ent_by As String,  _
                    ByVal ic_ent_datetime As Date,  _
                    ByVal ic_mod_by As String,  _
                    ByVal ic_mod_datetime As Date,  _
                    ByVal bc_bank_name As String,  _
                    ByVal ic_coy_id As String,  _
                    ByVal ic_coy_type As String,  _
                    ByVal ic_remark As String,  _
                    ByVal resident_country As String,  _
                    ByVal category As String,  _
                    ByVal ic_resident_type As String) As VendorListingRow
            Dim rowVendorListingRow As VendorListingRow = CType(Me.NewRow,VendorListingRow)
            Dim columnValuesArray() As Object = New Object() {ic_coy_name, ic_other_b_coy_code, ic_status, ic_business_reg_no, ic_bank_acct, ic_payment_method, ic_bank_code, ic_addr_line1, ic_ent_by, ic_ent_datetime, ic_mod_by, ic_mod_datetime, bc_bank_name, ic_coy_id, ic_coy_type, ic_remark, resident_country, category, ic_resident_type}
            rowVendorListingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVendorListingRow)
            Return rowVendorListingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VendorListingDataTable = CType(MyBase.Clone,VendorListingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VendorListingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnic_coy_name = MyBase.Columns("ic_coy_name")
            Me.columnic_other_b_coy_code = MyBase.Columns("ic_other_b_coy_code")
            Me.columnic_status = MyBase.Columns("ic_status")
            Me.columnic_business_reg_no = MyBase.Columns("ic_business_reg_no")
            Me.columnic_bank_acct = MyBase.Columns("ic_bank_acct")
            Me.columnic_payment_method = MyBase.Columns("ic_payment_method")
            Me.columnic_bank_code = MyBase.Columns("ic_bank_code")
            Me.columnic_addr_line1 = MyBase.Columns("ic_addr_line1")
            Me.columnic_ent_by = MyBase.Columns("ic_ent_by")
            Me.columnic_ent_datetime = MyBase.Columns("ic_ent_datetime")
            Me.columnic_mod_by = MyBase.Columns("ic_mod_by")
            Me.columnic_mod_datetime = MyBase.Columns("ic_mod_datetime")
            Me.columnbc_bank_name = MyBase.Columns("bc_bank_name")
            Me.columnic_coy_id = MyBase.Columns("ic_coy_id")
            Me.columnic_coy_type = MyBase.Columns("ic_coy_type")
            Me.columnic_remark = MyBase.Columns("ic_remark")
            Me.columnresident_country = MyBase.Columns("resident_country")
            Me.columncategory = MyBase.Columns("category")
            Me.columnic_resident_type = MyBase.Columns("ic_resident_type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnic_coy_name = New Global.System.Data.DataColumn("ic_coy_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_coy_name)
            Me.columnic_other_b_coy_code = New Global.System.Data.DataColumn("ic_other_b_coy_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_other_b_coy_code)
            Me.columnic_status = New Global.System.Data.DataColumn("ic_status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_status)
            Me.columnic_business_reg_no = New Global.System.Data.DataColumn("ic_business_reg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_business_reg_no)
            Me.columnic_bank_acct = New Global.System.Data.DataColumn("ic_bank_acct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_bank_acct)
            Me.columnic_payment_method = New Global.System.Data.DataColumn("ic_payment_method", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_payment_method)
            Me.columnic_bank_code = New Global.System.Data.DataColumn("ic_bank_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_bank_code)
            Me.columnic_addr_line1 = New Global.System.Data.DataColumn("ic_addr_line1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_addr_line1)
            Me.columnic_ent_by = New Global.System.Data.DataColumn("ic_ent_by", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_ent_by)
            Me.columnic_ent_datetime = New Global.System.Data.DataColumn("ic_ent_datetime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_ent_datetime)
            Me.columnic_mod_by = New Global.System.Data.DataColumn("ic_mod_by", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_mod_by)
            Me.columnic_mod_datetime = New Global.System.Data.DataColumn("ic_mod_datetime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_mod_datetime)
            Me.columnbc_bank_name = New Global.System.Data.DataColumn("bc_bank_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbc_bank_name)
            Me.columnic_coy_id = New Global.System.Data.DataColumn("ic_coy_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_coy_id)
            Me.columnic_coy_type = New Global.System.Data.DataColumn("ic_coy_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_coy_type)
            Me.columnic_remark = New Global.System.Data.DataColumn("ic_remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_remark)
            Me.columnresident_country = New Global.System.Data.DataColumn("resident_country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresident_country)
            Me.columncategory = New Global.System.Data.DataColumn("category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategory)
            Me.columnic_resident_type = New Global.System.Data.DataColumn("ic_resident_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnic_resident_type)
            Me.columnic_coy_name.AllowDBNull = false
            Me.columnic_coy_name.MaxLength = 100
            Me.columnic_other_b_coy_code.AllowDBNull = false
            Me.columnic_other_b_coy_code.MaxLength = 20
            Me.columnic_status.AllowDBNull = false
            Me.columnic_status.MaxLength = 1
            Me.columnic_business_reg_no.AllowDBNull = false
            Me.columnic_business_reg_no.MaxLength = 50
            Me.columnic_bank_acct.MaxLength = 30
            Me.columnic_payment_method.MaxLength = 10
            Me.columnic_bank_code.MaxLength = 30
            Me.columnic_addr_line1.MaxLength = 255
            Me.columnic_ent_by.MaxLength = 20
            Me.columnic_mod_by.MaxLength = 20
            Me.columnbc_bank_name.MaxLength = 100
            Me.columnic_coy_id.AllowDBNull = false
            Me.columnic_coy_id.MaxLength = 20
            Me.columnic_coy_type.AllowDBNull = false
            Me.columnic_coy_type.MaxLength = 1
            Me.columnic_remark.MaxLength = 1000
            Me.columnresident_country.MaxLength = 50
            Me.columncategory.MaxLength = 50
            Me.columnic_resident_type.MaxLength = 1
            Me.ExtendedProperties.Add("Generator_TablePropName", "_VendorListing")
            Me.ExtendedProperties.Add("Generator_UserTableName", "VendorListing")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVendorListingRow() As VendorListingRow
            Return CType(Me.NewRow,VendorListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VendorListingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VendorListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VendorListingRowChangedEvent) Is Nothing) Then
                RaiseEvent VendorListingRowChanged(Me, New VendorListingRowChangeEvent(CType(e.Row,VendorListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VendorListingRowChangingEvent) Is Nothing) Then
                RaiseEvent VendorListingRowChanging(Me, New VendorListingRowChangeEvent(CType(e.Row,VendorListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VendorListingRowDeletedEvent) Is Nothing) Then
                RaiseEvent VendorListingRowDeleted(Me, New VendorListingRowChangeEvent(CType(e.Row,VendorListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VendorListingRowDeletingEvent) Is Nothing) Then
                RaiseEvent VendorListingRowDeleting(Me, New VendorListingRowChangeEvent(CType(e.Row,VendorListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVendorListingRow(ByVal row As VendorListingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VendorListing = New VendorListing
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VendorListingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VendorListingRow
        Inherits Global.System.Data.DataRow
        
        Private tableVendorListing As VendorListingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVendorListing = CType(Me.Table,VendorListingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_coy_name() As String
            Get
                Return CType(Me(Me.tableVendorListing.ic_coy_nameColumn),String)
            End Get
            Set
                Me(Me.tableVendorListing.ic_coy_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_other_b_coy_code() As String
            Get
                Return CType(Me(Me.tableVendorListing.ic_other_b_coy_codeColumn),String)
            End Get
            Set
                Me(Me.tableVendorListing.ic_other_b_coy_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_status() As String
            Get
                Return CType(Me(Me.tableVendorListing.ic_statusColumn),String)
            End Get
            Set
                Me(Me.tableVendorListing.ic_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_business_reg_no() As String
            Get
                Return CType(Me(Me.tableVendorListing.ic_business_reg_noColumn),String)
            End Get
            Set
                Me(Me.tableVendorListing.ic_business_reg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_bank_acct() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_bank_acctColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_bank_acct' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_bank_acctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_payment_method() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_payment_methodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_payment_method' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_payment_methodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_bank_code() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_bank_codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_bank_code' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_bank_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_addr_line1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_addr_line1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_addr_line1' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_addr_line1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_ent_by() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_ent_byColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_ent_by' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_ent_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_ent_datetime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_ent_datetimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_ent_datetime' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_ent_datetimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_mod_by() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_mod_byColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_mod_by' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_mod_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_mod_datetime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_mod_datetimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_mod_datetime' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_mod_datetimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bc_bank_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.bc_bank_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bc_bank_name' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.bc_bank_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_coy_id() As String
            Get
                Return CType(Me(Me.tableVendorListing.ic_coy_idColumn),String)
            End Get
            Set
                Me(Me.tableVendorListing.ic_coy_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_coy_type() As String
            Get
                Return CType(Me(Me.tableVendorListing.ic_coy_typeColumn),String)
            End Get
            Set
                Me(Me.tableVendorListing.ic_coy_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_remarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_remark' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_remarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property resident_country() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.resident_countryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'resident_country' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.resident_countryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property category() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.categoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'category' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.categoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ic_resident_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableVendorListing.ic_resident_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ic_resident_type' in table 'VendorListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVendorListing.ic_resident_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_bank_acctNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_bank_acctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_bank_acctNull()
            Me(Me.tableVendorListing.ic_bank_acctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_payment_methodNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_payment_methodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_payment_methodNull()
            Me(Me.tableVendorListing.ic_payment_methodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_bank_codeNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_bank_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_bank_codeNull()
            Me(Me.tableVendorListing.ic_bank_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_addr_line1Null() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_addr_line1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_addr_line1Null()
            Me(Me.tableVendorListing.ic_addr_line1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_ent_byNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_ent_byColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_ent_byNull()
            Me(Me.tableVendorListing.ic_ent_byColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_ent_datetimeNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_ent_datetimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_ent_datetimeNull()
            Me(Me.tableVendorListing.ic_ent_datetimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_mod_byNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_mod_byColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_mod_byNull()
            Me(Me.tableVendorListing.ic_mod_byColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_mod_datetimeNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_mod_datetimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_mod_datetimeNull()
            Me(Me.tableVendorListing.ic_mod_datetimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbc_bank_nameNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.bc_bank_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbc_bank_nameNull()
            Me(Me.tableVendorListing.bc_bank_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_remarkNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_remarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_remarkNull()
            Me(Me.tableVendorListing.ic_remarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isresident_countryNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.resident_countryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setresident_countryNull()
            Me(Me.tableVendorListing.resident_countryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscategoryNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.categoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcategoryNull()
            Me(Me.tableVendorListing.categoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isic_resident_typeNull() As Boolean
            Return Me.IsNull(Me.tableVendorListing.ic_resident_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setic_resident_typeNull()
            Me(Me.tableVendorListing.ic_resident_typeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VendorListingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VendorListingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VendorListingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VendorListingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace VendorListingTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VendorListingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VendorListing"
            tableMapping.ColumnMappings.Add("ic_coy_name", "ic_coy_name")
            tableMapping.ColumnMappings.Add("ic_other_b_coy_code", "ic_other_b_coy_code")
            tableMapping.ColumnMappings.Add("ic_status", "ic_status")
            tableMapping.ColumnMappings.Add("ic_business_reg_no", "ic_business_reg_no")
            tableMapping.ColumnMappings.Add("ic_bank_acct", "ic_bank_acct")
            tableMapping.ColumnMappings.Add("ic_payment_method", "ic_payment_method")
            tableMapping.ColumnMappings.Add("ic_bank_code", "ic_bank_code")
            tableMapping.ColumnMappings.Add("ic_addr_line1", "ic_addr_line1")
            tableMapping.ColumnMappings.Add("ic_ent_by", "ic_ent_by")
            tableMapping.ColumnMappings.Add("ic_ent_datetime", "ic_ent_datetime")
            tableMapping.ColumnMappings.Add("ic_mod_by", "ic_mod_by")
            tableMapping.ColumnMappings.Add("ic_mod_datetime", "ic_mod_datetime")
            tableMapping.ColumnMappings.Add("bc_bank_name", "bc_bank_name")
            tableMapping.ColumnMappings.Add("ic_coy_id", "ic_coy_id")
            tableMapping.ColumnMappings.Add("ic_coy_type", "ic_coy_type")
            tableMapping.ColumnMappings.Add("ic_remark", "ic_remark")
            tableMapping.ColumnMappings.Add("resident_country", "resident_country")
            tableMapping.ColumnMappings.Add("category", "category")
            tableMapping.ColumnMappings.Add("ic_resident_type", "ic_resident_type")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString2").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT "&Global.Microsoft.VisualBasic.ChrW(9)&"a.ic_coy_name, a.ic_other_b_coy_code, a.ic_status, a.ic_business_reg_no, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"a.ic_bank_acct, a.ic_payment_method, a.ic_bank_code, a.ic_addr_line1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"a.ic"& _ 
                "_ent_by, a.ic_ent_datetime, a.ic_mod_by, a.ic_mod_datetime, b.bc_bank_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"a"& _ 
                ".ic_coy_id, a.ic_coy_type,a.ic_remark,c.code_desc AS resident_country, d.code_de"& _ 
                "sc as category, a.ic_resident_type"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ipp_company a "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT OUTER JOIN bank_co"& _ 
                "de b ON b.bc_bank_code = a.ic_bank_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN code_mstr c ON c.code_categor"& _ 
                "y = 'CT' AND c.CODE_ABBR = a.ic_resident_country"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN code_mstr d ON d.cod"& _ 
                "e_category = 'IPPCC' AND d.CODE_ABBR = a.ic_company_category"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (a.ic_coy_id"& _ 
                " = 'HLB') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY a.ic_coy_type, a.ic_coy_name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VendorListing.VendorListingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VendorListing.VendorListingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VendorListing.VendorListingDataTable = New VendorListing.VendorListingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
