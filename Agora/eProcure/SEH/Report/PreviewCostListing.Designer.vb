'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3649
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PreviewCostListing"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PreviewCostListing
    Inherits Global.System.Data.DataSet
    
    Private tableDataSetCostListing As DataSetCostListingDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataSetCostListing")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetCostListingDataTable(ds.Tables("DataSetCostListing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataSetCostListing() As DataSetCostListingDataTable
        Get
            Return Me.tableDataSetCostListing
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PreviewCostListing = CType(MyBase.Clone,PreviewCostListing)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataSetCostListing")) Is Nothing) Then
                MyBase.Tables.Add(New DataSetCostListingDataTable(ds.Tables("DataSetCostListing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataSetCostListing = CType(MyBase.Tables("DataSetCostListing"),DataSetCostListingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataSetCostListing) Is Nothing) Then
                Me.tableDataSetCostListing.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PreviewCostListing"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PreviewCostListing.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataSetCostListing = New DataSetCostListingDataTable
        MyBase.Tables.Add(Me.tableDataSetCostListing)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataSetCostListing() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PreviewCostListing = New PreviewCostListing
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataSetCostListingRowChangeEventHandler(ByVal sender As Object, ByVal e As DataSetCostListingRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataSetCostListingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC_INVENTORY_TYPE As Global.System.Data.DataColumn
        
        Private columnIM_ITEM_CODE As Global.System.Data.DataColumn
        
        Private columnIM_INVENTORY_NAME As Global.System.Data.DataColumn
        
        Private columnIC_COST_OPEN_QTY As Global.System.Data.DataColumn
        
        Private columnIC_COST_OPEN_UPRICE As Global.System.Data.DataColumn
        
        Private columnIC_COST_OPEN_COST As Global.System.Data.DataColumn
        
        Private columnIC_COST_CLOSE_QTY As Global.System.Data.DataColumn
        
        Private columnIC_COST_CLOSE_UPRICE As Global.System.Data.DataColumn
        
        Private columnIC_COST_CLOSE_COST As Global.System.Data.DataColumn
        
        Private columnRECEIVED_QTY As Global.System.Data.DataColumn
        
        Private columnRECEIVED_UPRICE As Global.System.Data.DataColumn
        
        Private columnRECEIVED_COST As Global.System.Data.DataColumn
        
        Private columnISSUED_QTY As Global.System.Data.DataColumn
        
        Private columnISSUED_UPRICE As Global.System.Data.DataColumn
        
        Private columnISSUED_COST As Global.System.Data.DataColumn
        
        Private columnIC_COST_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataSetCostListing"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_INVENTORY_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_INVENTORY_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_ITEM_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_ITEM_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_INVENTORY_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_INVENTORY_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COST_OPEN_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COST_OPEN_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COST_OPEN_UPRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COST_OPEN_UPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COST_OPEN_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COST_OPEN_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COST_CLOSE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COST_CLOSE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COST_CLOSE_UPRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COST_CLOSE_UPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COST_CLOSE_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COST_CLOSE_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVED_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVED_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVED_UPRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVED_UPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVED_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVED_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISSUED_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSUED_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISSUED_UPRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSUED_UPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISSUED_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSUED_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_COST_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_COST_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataSetCostListingRow
            Get
                Return CType(Me.Rows(index),DataSetCostListingRow)
            End Get
        End Property
        
        Public Event DataSetCostListingRowChanging As DataSetCostListingRowChangeEventHandler
        
        Public Event DataSetCostListingRowChanged As DataSetCostListingRowChangeEventHandler
        
        Public Event DataSetCostListingRowDeleting As DataSetCostListingRowChangeEventHandler
        
        Public Event DataSetCostListingRowDeleted As DataSetCostListingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataSetCostListingRow(ByVal row As DataSetCostListingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataSetCostListingRow( _
                    ByVal IC_INVENTORY_TYPE As String,  _
                    ByVal IM_ITEM_CODE As String,  _
                    ByVal IM_INVENTORY_NAME As String,  _
                    ByVal IC_COST_OPEN_QTY As String,  _
                    ByVal IC_COST_OPEN_UPRICE As String,  _
                    ByVal IC_COST_OPEN_COST As String,  _
                    ByVal IC_COST_CLOSE_QTY As String,  _
                    ByVal IC_COST_CLOSE_UPRICE As String,  _
                    ByVal IC_COST_CLOSE_COST As String,  _
                    ByVal RECEIVED_QTY As String,  _
                    ByVal RECEIVED_UPRICE As String,  _
                    ByVal RECEIVED_COST As String,  _
                    ByVal ISSUED_QTY As String,  _
                    ByVal ISSUED_UPRICE As String,  _
                    ByVal ISSUED_COST As String,  _
                    ByVal IC_COST_DATE As String) As DataSetCostListingRow
            Dim rowDataSetCostListingRow As DataSetCostListingRow = CType(Me.NewRow,DataSetCostListingRow)
            Dim columnValuesArray() As Object = New Object() {IC_INVENTORY_TYPE, IM_ITEM_CODE, IM_INVENTORY_NAME, IC_COST_OPEN_QTY, IC_COST_OPEN_UPRICE, IC_COST_OPEN_COST, IC_COST_CLOSE_QTY, IC_COST_CLOSE_UPRICE, IC_COST_CLOSE_COST, RECEIVED_QTY, RECEIVED_UPRICE, RECEIVED_COST, ISSUED_QTY, ISSUED_UPRICE, ISSUED_COST, IC_COST_DATE}
            rowDataSetCostListingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataSetCostListingRow)
            Return rowDataSetCostListingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataSetCostListingDataTable = CType(MyBase.Clone,DataSetCostListingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataSetCostListingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC_INVENTORY_TYPE = MyBase.Columns("IC_INVENTORY_TYPE")
            Me.columnIM_ITEM_CODE = MyBase.Columns("IM_ITEM_CODE")
            Me.columnIM_INVENTORY_NAME = MyBase.Columns("IM_INVENTORY_NAME")
            Me.columnIC_COST_OPEN_QTY = MyBase.Columns("IC_COST_OPEN_QTY")
            Me.columnIC_COST_OPEN_UPRICE = MyBase.Columns("IC_COST_OPEN_UPRICE")
            Me.columnIC_COST_OPEN_COST = MyBase.Columns("IC_COST_OPEN_COST")
            Me.columnIC_COST_CLOSE_QTY = MyBase.Columns("IC_COST_CLOSE_QTY")
            Me.columnIC_COST_CLOSE_UPRICE = MyBase.Columns("IC_COST_CLOSE_UPRICE")
            Me.columnIC_COST_CLOSE_COST = MyBase.Columns("IC_COST_CLOSE_COST")
            Me.columnRECEIVED_QTY = MyBase.Columns("RECEIVED_QTY")
            Me.columnRECEIVED_UPRICE = MyBase.Columns("RECEIVED_UPRICE")
            Me.columnRECEIVED_COST = MyBase.Columns("RECEIVED_COST")
            Me.columnISSUED_QTY = MyBase.Columns("ISSUED_QTY")
            Me.columnISSUED_UPRICE = MyBase.Columns("ISSUED_UPRICE")
            Me.columnISSUED_COST = MyBase.Columns("ISSUED_COST")
            Me.columnIC_COST_DATE = MyBase.Columns("IC_COST_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC_INVENTORY_TYPE = New Global.System.Data.DataColumn("IC_INVENTORY_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_INVENTORY_TYPE)
            Me.columnIM_ITEM_CODE = New Global.System.Data.DataColumn("IM_ITEM_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_ITEM_CODE)
            Me.columnIM_INVENTORY_NAME = New Global.System.Data.DataColumn("IM_INVENTORY_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_INVENTORY_NAME)
            Me.columnIC_COST_OPEN_QTY = New Global.System.Data.DataColumn("IC_COST_OPEN_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COST_OPEN_QTY)
            Me.columnIC_COST_OPEN_UPRICE = New Global.System.Data.DataColumn("IC_COST_OPEN_UPRICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COST_OPEN_UPRICE)
            Me.columnIC_COST_OPEN_COST = New Global.System.Data.DataColumn("IC_COST_OPEN_COST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COST_OPEN_COST)
            Me.columnIC_COST_CLOSE_QTY = New Global.System.Data.DataColumn("IC_COST_CLOSE_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COST_CLOSE_QTY)
            Me.columnIC_COST_CLOSE_UPRICE = New Global.System.Data.DataColumn("IC_COST_CLOSE_UPRICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COST_CLOSE_UPRICE)
            Me.columnIC_COST_CLOSE_COST = New Global.System.Data.DataColumn("IC_COST_CLOSE_COST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COST_CLOSE_COST)
            Me.columnRECEIVED_QTY = New Global.System.Data.DataColumn("RECEIVED_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVED_QTY)
            Me.columnRECEIVED_UPRICE = New Global.System.Data.DataColumn("RECEIVED_UPRICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVED_UPRICE)
            Me.columnRECEIVED_COST = New Global.System.Data.DataColumn("RECEIVED_COST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVED_COST)
            Me.columnISSUED_QTY = New Global.System.Data.DataColumn("ISSUED_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSUED_QTY)
            Me.columnISSUED_UPRICE = New Global.System.Data.DataColumn("ISSUED_UPRICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSUED_UPRICE)
            Me.columnISSUED_COST = New Global.System.Data.DataColumn("ISSUED_COST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSUED_COST)
            Me.columnIC_COST_DATE = New Global.System.Data.DataColumn("IC_COST_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC_COST_DATE)
            Me.columnIC_INVENTORY_TYPE.AllowDBNull = false
            Me.columnIM_ITEM_CODE.AllowDBNull = false
            Me.columnIM_INVENTORY_NAME.AllowDBNull = false
            Me.columnIC_COST_OPEN_QTY.AllowDBNull = false
            Me.columnIC_COST_OPEN_UPRICE.AllowDBNull = false
            Me.columnIC_COST_OPEN_COST.AllowDBNull = false
            Me.columnIC_COST_CLOSE_QTY.AllowDBNull = false
            Me.columnIC_COST_CLOSE_UPRICE.AllowDBNull = false
            Me.columnIC_COST_CLOSE_COST.AllowDBNull = false
            Me.columnRECEIVED_QTY.AllowDBNull = false
            Me.columnRECEIVED_UPRICE.AllowDBNull = false
            Me.columnRECEIVED_COST.AllowDBNull = false
            Me.columnISSUED_QTY.AllowDBNull = false
            Me.columnISSUED_UPRICE.AllowDBNull = false
            Me.columnISSUED_COST.AllowDBNull = false
            Me.columnIC_COST_DATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataSetCostListingRow() As DataSetCostListingRow
            Return CType(Me.NewRow,DataSetCostListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataSetCostListingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataSetCostListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataSetCostListingRowChangedEvent) Is Nothing) Then
                RaiseEvent DataSetCostListingRowChanged(Me, New DataSetCostListingRowChangeEvent(CType(e.Row,DataSetCostListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataSetCostListingRowChangingEvent) Is Nothing) Then
                RaiseEvent DataSetCostListingRowChanging(Me, New DataSetCostListingRowChangeEvent(CType(e.Row,DataSetCostListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataSetCostListingRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataSetCostListingRowDeleted(Me, New DataSetCostListingRowChangeEvent(CType(e.Row,DataSetCostListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataSetCostListingRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataSetCostListingRowDeleting(Me, New DataSetCostListingRowChangeEvent(CType(e.Row,DataSetCostListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataSetCostListingRow(ByVal row As DataSetCostListingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PreviewCostListing = New PreviewCostListing
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataSetCostListingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataSetCostListingRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataSetCostListing As DataSetCostListingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataSetCostListing = CType(Me.Table,DataSetCostListingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_INVENTORY_TYPE() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_INVENTORY_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_INVENTORY_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_ITEM_CODE() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IM_ITEM_CODEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IM_ITEM_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_INVENTORY_NAME() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IM_INVENTORY_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IM_INVENTORY_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COST_OPEN_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_COST_OPEN_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_COST_OPEN_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COST_OPEN_UPRICE() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_COST_OPEN_UPRICEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_COST_OPEN_UPRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COST_OPEN_COST() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_COST_OPEN_COSTColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_COST_OPEN_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COST_CLOSE_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_COST_CLOSE_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_COST_CLOSE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COST_CLOSE_UPRICE() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_COST_CLOSE_UPRICEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_COST_CLOSE_UPRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COST_CLOSE_COST() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_COST_CLOSE_COSTColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_COST_CLOSE_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVED_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.RECEIVED_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.RECEIVED_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVED_UPRICE() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.RECEIVED_UPRICEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.RECEIVED_UPRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVED_COST() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.RECEIVED_COSTColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.RECEIVED_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISSUED_QTY() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.ISSUED_QTYColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.ISSUED_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISSUED_UPRICE() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.ISSUED_UPRICEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.ISSUED_UPRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISSUED_COST() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.ISSUED_COSTColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.ISSUED_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_COST_DATE() As String
            Get
                Return CType(Me(Me.tableDataSetCostListing.IC_COST_DATEColumn),String)
            End Get
            Set
                Me(Me.tableDataSetCostListing.IC_COST_DATEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataSetCostListingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataSetCostListingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataSetCostListingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataSetCostListingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace PreviewCostListingTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataSetCostListingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataSetCostListing"
            tableMapping.ColumnMappings.Add("IC_INVENTORY_TYPE", "IC_INVENTORY_TYPE")
            tableMapping.ColumnMappings.Add("IM_ITEM_CODE", "IM_ITEM_CODE")
            tableMapping.ColumnMappings.Add("IM_INVENTORY_NAME", "IM_INVENTORY_NAME")
            tableMapping.ColumnMappings.Add("IC_COST_OPEN_QTY", "IC_COST_OPEN_QTY")
            tableMapping.ColumnMappings.Add("IC_COST_OPEN_UPRICE", "IC_COST_OPEN_UPRICE")
            tableMapping.ColumnMappings.Add("IC_COST_OPEN_COST", "IC_COST_OPEN_COST")
            tableMapping.ColumnMappings.Add("IC_COST_CLOSE_QTY", "IC_COST_CLOSE_QTY")
            tableMapping.ColumnMappings.Add("IC_COST_CLOSE_UPRICE", "IC_COST_CLOSE_UPRICE")
            tableMapping.ColumnMappings.Add("IC_COST_CLOSE_COST", "IC_COST_CLOSE_COST")
            tableMapping.ColumnMappings.Add("RECEIVED_QTY", "RECEIVED_QTY")
            tableMapping.ColumnMappings.Add("RECEIVED_UPRICE", "RECEIVED_UPRICE")
            tableMapping.ColumnMappings.Add("RECEIVED_COST", "RECEIVED_COST")
            tableMapping.ColumnMappings.Add("ISSUED_QTY", "ISSUED_QTY")
            tableMapping.ColumnMappings.Add("ISSUED_UPRICE", "ISSUED_UPRICE")
            tableMapping.ColumnMappings.Add("ISSUED_COST", "ISSUED_COST")
            tableMapping.ColumnMappings.Add("IC_COST_DATE", "IC_COST_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("eprocureConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT '' AS IC_COST_DATE, '' AS IC_INVENTORY_TYPE, '' AS IM_ITEM_CODE, '' AS IM_"& _ 
                "INVENTORY_NAME, '' AS IC_COST_OPEN_QTY, '' AS IC_COST_OPEN_UPRICE, '' AS IC_COST"& _ 
                "_OPEN_COST, '' AS IC_COST_CLOSE_QTY, '' AS IC_COST_CLOSE_UPRICE, '' AS IC_COST_C"& _ 
                "LOSE_COST, '' AS RECEIVED_QTY, '' AS RECEIVED_UPRICE, '' AS RECEIVED_COST, '' AS"& _ 
                " ISSUED_QTY, '' AS ISSUED_UPRICE, '' AS ISSUED_COST FROM Inventory_cost "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PreviewCostListing.DataSetCostListingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PreviewCostListing.DataSetCostListingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PreviewCostListing.DataSetCostListingDataTable = New PreviewCostListing.DataSetCostListingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
